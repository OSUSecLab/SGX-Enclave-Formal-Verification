~/Documents/sgx_formal_verification/artifact_submit/code/BI-SGX/vulnerable
❯ tamarin-prover bi.spthy --prove
maude tool: 'maude'
 checking version: 3.0. OK.
 checking installation: OK.

  solved goal nr. 0 (directly):
    E_r_data_reply_ex( ra_r_key_x, index_req_x1.1, sealed_e_return_x1.2
    ) @ #E_r_data_reply_ex_x1.3
  solved goal nr. 0 (directly):
    RCHR_data_rcv( ra_r_key, index_req.1 ) @ #RCHR_data_rcv.2
  solved goal nr. 0 (directly):
    RCHR_data_rcv( ra_r_key_x, index_req_x.1 ) @ #RCHR_data_rcv_x.2
  solved goal nr. 0 (directly): DO_Setup( oname ) @ #do_setup.1
  solved goal nr. 0 (directly): DO_Setup( oname ) @ #do_setup.1
  solved goal nr. 0 (directly):
    RCHR_data_rcv( ra_r_key, index_req1.1 ) @ #RCHR_data_rcv1.2
  solved goal nr. 0 (directly):
    RCHR_data_rcv( ra_r_key, index_req.1 ) @ #RCHR_data_rcv.2
  solved goal nr. 0 (directly): DO_Setup( oname ) @ #do_setup.1
  solved goal nr. 1 (directly):
    DO_upload( ra_o_key1.2, data1.3, oname, cipher_upload_req1.4,
               gcm_tag_upload_req1.5
    ) @ #do_upload1.7
  solved goal nr. 1 (directly):
    DO_upload( ra_o_key.2, data.3, oname, cipher_upload_req.4,
               gcm_tag_upload_req.5
    ) @ #do_upload.6
  solved goal nr. 2 (directly):
    DO_upload( ra_o_key2.8, data2.9, oname, cipher_upload_req2.10,
               gcm_tag_upload_req2.11
    ) @ #do_upload2.13
  solved goal nr. 2 (directly):
    L1_platform( platform.7 ) @ #L1_platform.8
  solved goal nr. 3 (directly):
    L1_platform( platform.14 ) @ #L1_platform.15
  solved goal nr. 1 (directly):
    DO_upload( ra_o_key.2, data.3, oname, cipher_upload_req.4,
               gcm_tag_upload_req.5
    ) @ #do_upload.6
  solved goal nr. 3 (directly):
    L2_mrsigner_mrenclave( platform.7, mrsigner.10, mrenclave.9
    ) @ #L2_mrsigner_mrenclave.11
  solved goal nr. 2 (directly):
    L1_platform( platform.7 ) @ #L1_platform.8
  solved goal nr. 4 (directly):
    L2_mrsigner_mrenclave( platform.14, mrsigner.17, mrenclave.16
    ) @ #L2_mrsigner_mrenclave.18
  solved goal nr. 1 (directly):
    E_r_data_reply_ex( ra_r_key_x, index_req_x2.4, sealed_e_return_x2.5
    ) @ #E_r_data_reply_ex_x2.6
  solved goal nr. 1 (directly):
    RCHR_data_rcv( ra_r_key, index_req2.3 ) @ #RCHR_data_rcv2.4
  solved goal nr. 0 (directly): !DB_index( t.1, t.2 ) ▶₀ #i
  solved goal nr. 4 (directly):
    L3_process( platform.7, mrsigner.10, mrenclave.9, p_id.12
    ) @ #L3_process.13
  solved goal nr. 5 (directly):
    L3_process( platform.14, mrsigner.17, mrenclave.16, p_id1.19
    ) @ #L3_process1.21
  solved goal nr. 3 (directly):
    L2_mrsigner_mrenclave( platform.7, mrsigner.10, mrenclave.9
    ) @ #L2_mrsigner_mrenclave.11
  solved goal nr. 1 (directly):
    E_r_data_reply_ex( ra_r_key, index_req_x.4, sealed_e_return_x.5
    ) @ #E_r_data_reply_ex_x.6
  solved goal nr. 6 (directly):
    L3_process( platform.14, mrsigner.17, mrenclave.16, p_id2.20
    ) @ #L3_process2.22
  solved goal nr. 5 (directly):
    E_o_decrypt_upload( platform.7, mrsigner.10, mrenclave.9, p_id.12,
                        ra_o_key.2, data.3, oname, cipher_upload_req.4,
                        gcm_tag_upload_req.5, sealed_e_return.14
    ) @ #E_o_decrypt_upload.15
  solved goal nr. 1 (directly):
    RCHR_data_rcv( ra_r_key_y.3, index_req_y.4 ) @ #RCHR_data_rcv_y.5
  solved goal nr. 7 (directly):
    E_o_decrypt_upload( platform.14, mrsigner.17, mrenclave.16,
                        p_id1.19, ra_o_key1.2, data1.3, oname, cipher_upload_req1.4,
                        gcm_tag_upload_req1.5, sealed_e_return1.6
    ) @ #E_o_decrypt_upload1.23
  solved goal nr. 6 (directly):
    DB_setup( ptrIndex1.17, '1' ) @ #db_setup.18
  solved goal nr. 4 (directly):
    L3_process( platform.7, mrsigner.10, mrenclave.9, p_id.12
    ) @ #L3_process.13
  solved goal nr. 8 (directly):
    E_o_decrypt_upload( platform.14, mrsigner.17, mrenclave.16,
                        p_id2.20, ra_o_key2.8, data2.9, oname, cipher_upload_req2.10,
                        gcm_tag_upload_req2.11, sealed_e_return2.12
    ) @ #E_o_decrypt_upload2.24
  solved goal nr. 5 (directly):
    E_o_decrypt_upload( platform.7, mrsigner.10, mrenclave.9, p_id.12,
                        ra_o_key.2, data.3, oname, cipher_upload_req.4,
                        gcm_tag_upload_req.5, sealed_e_return.14
    ) @ #E_o_decrypt_upload.15
  solved goal nr. 14 (directly):
    E_r_data_reply_ex( ~ra_r_key.7, index_req_x.20,
                       sealed_e_return_x.21
    ) @ #E_r_data_reply_ex_x.22
  solved goal nr. 2 (directly):
    E_r_data_reply_ex( ra_r_key_x, index_req_x.7, sealed_e_return_x.8
    ) @ #E_r_data_reply_ex_x.9
  solved goal nr. 9 (directly):
    E_r_data_req( platform.7, mrsigner.10, mrenclave.9, p_id.12,
                  ra_r_key.21, index_req.22, cipher_data_req.23, gcm_tag_data_req.24
    ) @ #E_r_data_req.26
  solved goal nr. 9 (directly):
    DB_setup( ptrIndex1.26, '1' ) @ #db_setup.28
  solved goal nr. 6 (directly):
    DB_setup( ptrIndex1.17, '1' ) @ #db_setup.19
  solved goal nr. 3 (directly):
    E_r_data_reply_ex( ra_r_key_y.3, index_req_x.11,
                       sealed_e_return_x.12
    ) @ #E_r_data_reply_ex_x.13
  solved goal nr. 13 (directly):
    E_r_data_req( platform.14, mrsigner.17, mrenclave.16, p_id1.19,
                  ra_r_key.32, index_req.33, cipher_data_req.34, gcm_tag_data_req.35
    ) @ #E_r_data_req.37
  solved goal nr. 9 (directly):
    E_r_data_req( platform.7, mrsigner.10, mrenclave.9, p_id.12,
                  ra_r_key.22, index_req.23, cipher_data_req.24, gcm_tag_data_req.25
    ) @ #E_r_data_req.27
  solved goal nr. 10 (directly):
    DB_retrieve( p_id.12, index_req.22, sealed_e_return.14
    ) @ #db_retrieve.27
  solved goal nr. 2 (directly):
    Start_thread_db_upload( ~p_id.4 ) ▶₁ #vr.3
  solved goal nr. 14 (directly):
    DB_retrieve( p_id1.19, index_req.33, sealed_e_return2.12
    ) @ #db_retrieve.38
  solved goal nr. 0 (directly): !DB_mem( t.1, t.2 ) ▶₀ #i
  solved goal nr. 28 (directly):
    E_r_data_reply_ex( ~ra_r_key.14, index_req_x.39,
                       sealed_e_return_x.40
    ) @ #E_r_data_reply_ex_x.41
  solved goal nr. 2 (directly):
    Start_thread_db_upload( ~p_id.4 ) ▶₁ #vr.3
  solved goal nr. 11 (directly):
    E_r_data_resp( platform.7, mrsigner.10, mrenclave.9, p_id.12,
                   ra_r_key.21, index_req.22, data.3, sealed_e_return.14,
                   cipher_data_resp.28, gcm_tag_data_resp.29
    ) @ #E_r_data_resp.30
  solved goal nr. 8 (directly):
    !L23( platform_sec.11, mrsigner.11, mrenclave.11 ) ▶₀ #vr.10
  solved goal nr. 15 (directly):
    E_r_data_resp( platform.14, mrsigner.17, mrenclave.16, p_id1.19,
                   ra_r_key.32, index_req.33, data2.9, sealed_e_return2.12,
                   cipher_data_resp.39, gcm_tag_data_resp.40
    ) @ #E_r_data_resp.41
  solved goal nr. 0 (directly): !Indexes( t.1 ) ▶₀ #i
  solved goal nr. 9 (directly):
    !L23( platform_sec.11, mrsigner.11, mrenclave.11 ) ▶₀ #vr.10
  solved goal nr. 10 (directly):
    DB_retrieve( p_id.12, index_req.23, sealed_e_return.14
    ) @ #db_retrieve.28
  solved goal nr. 29 (directly):
    E_r_data_reply_ex( ~ra_r_key.21, index_req_x.43,
                       sealed_e_return_x.44
    ) @ #E_r_data_reply_ex_x.45
  solved goal nr. 16 (directly):
    RCHR_data_resp( ra_r_key.32, index_req.33, data2.9,
                    cipher_data_resp.39, gcm_tag_data_resp.40
    ) @ #rchr_data_resp.42
  solved goal nr. 11 (directly): !L12( platform_sec.11 ) ▶₂ #vr.13
  solved goal nr. 12 (directly):
    RCHR_data_resp( ra_r_key.21, index_req.22, data.3,
                    cipher_data_resp.28, gcm_tag_data_resp.29
    ) @ #rchr_data_resp.31
  solved goal nr. 0 (directly): !L12( t.1 ) ▶₀ #i
  solved goal nr. 10 (directly): !L12( platform_sec.11 ) ▶₂ #vr.13
  solved goal nr. 0 (directly): !L23( t.1, t.2, t.3 ) ▶₀ #i
  solved goal nr. 2 (directly): !L12( t.1 ) ▶₂ #vr.4
  solved goal nr. 0 (directly): !OMem( t.1 ) ▶₀ #i
  solved goal nr. 11 (directly):
    E_r_data_resp( platform.7, mrsigner.10, mrenclave.9, p_id.12,
                   ra_r_key.22, index_req.23, data.3, sealed_e_return.14,
                   cipher_data_resp.29, gcm_tag_data_resp.30
    ) @ #E_r_data_resp.31
  solved goal nr. 0 (directly):
    EPC_E_r( t.1, t.2, t.3, t.4, t.5, t.6 ) ▶₀ #i
  solved goal nr. 12 (directly):
    RCHR_data_resp( ra_r_key.22, index_req.23, data.3,
                    cipher_data_resp.29, gcm_tag_data_resp.30
    ) @ #rchr_data_resp.32
  solved goal nr. 0 (directly): Mem_RCHR( t.1, t.2 ) ▶₀ #i
  solved goal nr. 5 (directly): RA_r_login( ~ra_r_key.8 ) ▶₁ #vr.7
  solved goal nr. 2 (directly): !Indexes( t.2 ) ▶₀ #vr.3
  solved goal nr. 6 (directly):
    Start_thread_e_data_req( t.1, t.2, t.3, ~p_id.8 ) ▶₂ #vr.7
  solved goal nr. 8 (directly): !Indexes( index_req.14 ) ▶₀ #vr.13
  solved goal nr. 10 (directly): !L23( t.1, t.2, t.3 ) ▶₀ #vr.16
  solved goal nr. 0 (directly): RA_o_login( t.1 ) ▶₀ #i
  solved goal nr. 13 (directly): !L12( t.1 ) ▶₂ #vr.22
  solved goal nr. 2 (directly): !OMem( oname.3 ) ▶₂ #vr.2
  solved goal nr. 0 (directly): RA_r_login( t.1 ) ▶₀ #i
  solved goal nr. 2 (directly): !Indexes( index_req.3 ) ▶₀ #vr.2
  solved goal nr. 0 (directly): Start_thread_db_data_req( t.1 ) ▶₀ #i
  solved goal nr. 0 (directly): Start_thread_db_upload( t.1 ) ▶₀ #i
  solved goal nr. 2 (directly):
    !L23( platform_sec.3, mrsigner.3, mrenclave.3 ) ▶₀ #vr.2
  solved goal nr. 2 (directly):
    !L23( platform_sec.3, mrsigner.3, mrenclave.3 ) ▶₀ #vr.2
  solved goal nr. 0 (directly):
    Start_thread_e_data_req( t.1, t.2, t.3, t.4 ) ▶₀ #i
  solved goal nr. 2 (directly): !L23( t.1, t.2, t.3 ) ▶₀ #vr.5
  solved goal nr. 4 (directly): !L12( platform_sec.3 ) ▶₂ #vr.5
  solved goal nr. 0 (directly):
    Start_thread_e_upload( t.1, t.2, t.3, t.4 ) ▶₀ #i
  solved goal nr. 4 (directly): !L12( t.1 ) ▶₂ #vr.8
  solved goal nr. 4 (directly): !L12( platform_sec.3 ) ▶₂ #vr.5
  solved goal nr. 2 (directly): !L23( t.1, t.2, t.3 ) ▶₀ #vr.5
  solved goal nr. 0 (directly): !KU( ~t.1 ) @ #i
  solved goal nr. 0 (directly): !KU( fst(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( h(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( sdec(t.1, t.2) ) @ #i
  solved goal nr. 0 (directly): !KU( senc(t.1, t.2) ) @ #i
  solved goal nr. 4 (directly): !OMem( oname.7 ) ▶₂ #vr.6
  solved goal nr. 4 (directly): !OMem( oname.7 ) ▶₂ #vr.6
  solved goal nr. 0 (directly): !KU( snd(t.1) ) @ #i
  solved goal nr. 0 (directly): !KU( snd(t.1) ) @ #i
  solved goal nr. 4 (directly): !OMem( oname.10 ) ▶₂ #vr.9
  solved goal nr. 4 (directly): !L12( t.1 ) ▶₂ #vr.8
  solved goal nr. 4 (directly): !OMem( oname.7 ) ▶₂ #vr.6
  solved goal nr. 4 (directly): !OMem( oname.7 ) ▶₂ #vr.6
  solved goal nr. 10 (directly): !L23( t.1, t.2, t.3 ) ▶₀ #vr.16
  solved goal nr. 14 (directly): !L12( t.1 ) ▶₂ #vr.21
  solved goal nr. 4 (directly): !OMem( oname.10 ) ▶₂ #vr.9
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 4 (directly): !OMem( oname.10 ) ▶₂ #vr.9
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 4 (directly): !OMem( oname.10 ) ▶₂ #vr.9
  solved goal nr. 4 (directly): !OMem( oname.7 ) ▶₂ #vr.6
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 4 (directly): !OMem( oname.7 ) ▶₂ #vr.6
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.10, mrsigner.10, mrenclave.10,
                           ~p_id.10
    ) ▶₁ #vr.9
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.10, mrsigner.10, mrenclave.10,
                           ~p_id.10
    ) ▶₁ #vr.9
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 4 (directly): !L12( platform_sec.7 ) ▶₂ #vr.6
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.10 ) ▶₂ #vr.9
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.10 ) ▶₂ #vr.9
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 18 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.25
  solved goal nr. 12 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.18
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 20 (directly): !OMem( oname.29 ) ▶₂ #vr.28
  solved goal nr. 14 (directly): !OMem( oname.22 ) ▶₂ #vr.21
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 22 (directly): !L12( platform_sec.10 ) ▶₂ #vr.32
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 16 (directly): !L12( platform_sec.10 ) ▶₂ #vr.25
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.10, mrsigner.10, mrenclave.10,
                           ~p_id.10
    ) ▶₁ #vr.9
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.10, mrsigner.10, mrenclave.10,
                           ~p_id.10
    ) ▶₁ #vr.9
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.10 ) ▶₂ #vr.9
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.10 ) ▶₂ #vr.9
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 4 (directly): !Indexes( index_req.7 ) ▶₀ #vr.6
  solved goal nr. 18 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.25
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 18 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.25
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.7, mrsigner.7, mrenclave.7,
                           ~p_id.7
    ) ▶₁ #vr.6
  solved goal nr. 20 (directly): !OMem( oname.29 ) ▶₂ #vr.28
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 20 (directly): !OMem( oname.29 ) ▶₂ #vr.28
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.7 ) ▶₂ #vr.6
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 22 (directly): !L12( platform_sec.10 ) ▶₂ #vr.32
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 18 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.22
  solved goal nr. 22 (directly): !L12( platform_sec.10 ) ▶₂ #vr.32
  solved goal nr. 20 (directly): !OMem( oname.26 ) ▶₂ #vr.25
  solved goal nr. 22 (directly): !L12( platform_sec.7 ) ▶₂ #vr.29
  solved goal nr. 7 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.6
  solved goal nr. 8 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.6
  solved goal nr. 12 (directly): !Indexes( index_req.16 ) ▶₀ #vr.15
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 17 (directly): !L12( platform_sec.7 ) ▶₂ #vr.24
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 7 (directly):
    Start_thread_e_upload( platform_sec.10, mrsigner.10, mrenclave.10,
                           ~p_id.10
    ) ▶₁ #vr.9
  solved goal nr. 18 (directly): !L12( platform_sec.7 ) ▶₂ #vr.23
  solved goal nr. 4 (directly): !Indexes( index_req.7 ) ▶₀ #vr.6
  solved goal nr. 8 (directly): RA_o_login( ~ra_o_key.10 ) ▶₂ #vr.9
  solved goal nr. 4 (directly): !Indexes( index_req.7 ) ▶₀ #vr.6
  solved goal nr. 4 (directly): !Indexes( index_req.10 ) ▶₀ #vr.9
  solved goal nr. 4 (directly): !Indexes( index_req.7 ) ▶₀ #vr.6
  solved goal nr. 18 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.25
  solved goal nr. 20 (directly): !OMem( oname.29 ) ▶₂ #vr.28
  solved goal nr. 22 (directly): !L12( platform_sec.10 ) ▶₂ #vr.32
  solved goal nr. 7 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.6
  solved goal nr. 4 (directly): !Indexes( index_req.7 ) ▶₀ #vr.6
  solved goal nr. 8 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.6
  solved goal nr. 7 (directly): RA_r_login( ~ra_r_key.10 ) ▶₁ #vr.9
  solved goal nr. 7 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.6
  solved goal nr. 12 (directly): !Indexes( index_req.16 ) ▶₀ #vr.15
  solved goal nr. 7 (directly):
    !DB_mem( index_req.7, sealed_cipher.7 ) ▶₁ #vr.6
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 8 (directly):
    Start_thread_e_data_req( platform_sec.10, mrsigner.10,
                             mrenclave.10, ~p_id.10
    ) ▶₂ #vr.9
  solved goal nr. 8 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.6
  solved goal nr. 17 (directly): !L12( platform_sec.7 ) ▶₂ #vr.24
  solved goal nr. 12 (directly): !Indexes( index_req.16 ) ▶₀ #vr.15
  solved goal nr. 12 (directly): !Indexes( index_req.19 ) ▶₀ #vr.18
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 14 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.21
  solved goal nr. 17 (directly): !L12( platform_sec.7 ) ▶₂ #vr.24
  solved goal nr. 17 (directly): !L12( platform_sec.10 ) ▶₂ #vr.27
  solved goal nr. 7 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.6
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.7, mrsigner.7, mrenclave.7, ~p_id.7,
             ~ra_r_key.7, index_req.7
    ) ▶₁ #vr.6
  solved goal nr. 22 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.25
  solved goal nr. 8 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.6
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 12 (directly): !Indexes( index_req.16 ) ▶₀ #vr.15
  solved goal nr. 18 (directly): !L12( platform_sec.7 ) ▶₂ #vr.23
  solved goal nr. 23 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.25
  solved goal nr. 4 (directly): !Indexes( index_req.10 ) ▶₀ #vr.9
  solved goal nr. 25 (directly): !Indexes( index_req.32 ) ▶₀ #vr.31
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 17 (directly): !L12( platform_sec.7 ) ▶₂ #vr.24
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 14 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.21
  solved goal nr. 30 (directly): !L12( platform_sec.7 ) ▶₂ #vr.40
  solved goal nr. 18 (directly): !L12( platform_sec.7 ) ▶₂ #vr.23
  solved goal nr. 18 (directly): !L12( platform_sec.10 ) ▶₂ #vr.26
  solved goal nr. 4 (directly): !Indexes( index_req.10 ) ▶₀ #vr.9
  solved goal nr. 14 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.18
  solved goal nr. 7 (directly):
    !DB_mem( index_req.7, sealed_cipher.7 ) ▶₁ #vr.6
  solved goal nr. 18 (directly): !L12( platform_sec.7 ) ▶₂ #vr.23
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 4 (directly): !Indexes( index_req.10 ) ▶₀ #vr.9
  solved goal nr. 31 (directly): !L12( platform_sec.7 ) ▶₂ #vr.39
  solved goal nr. 7 (directly):
    !DB_mem( index_req.7, sealed_cipher.7 ) ▶₁ #vr.6
  solved goal nr. 7 (directly):
    !DB_mem( index_req.10, sealed_cipher.10 ) ▶₁ #vr.9
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.7, mrsigner.7, mrenclave.7, ~p_id.7,
             ~ra_r_key.7, index_req.7
    ) ▶₁ #vr.6
  solved goal nr. 22 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.25
  solved goal nr. 23 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.25
  solved goal nr. 7 (directly): RA_r_login( ~ra_r_key.10 ) ▶₁ #vr.9
  solved goal nr. 25 (directly): !Indexes( index_req.32 ) ▶₀ #vr.31
  solved goal nr. 8 (directly):
    Start_thread_e_data_req( platform_sec.10, mrsigner.10,
                             mrenclave.10, ~p_id.10
    ) ▶₂ #vr.9
  solved goal nr. 7 (directly):
    !DB_mem( index_req.7, sealed_cipher.7 ) ▶₁ #vr.6
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 12 (directly): !Indexes( index_req.19 ) ▶₀ #vr.18
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.7, mrsigner.7, mrenclave.7, ~p_id.7,
             ~ra_r_key.7, index_req.7
    ) ▶₁ #vr.6
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.10, mrsigner.10, mrenclave.10, ~p_id.10,
             ~ra_r_key.10, index_req.10
    ) ▶₁ #vr.9
  solved goal nr. 30 (directly): !L12( platform_sec.7 ) ▶₂ #vr.40
  solved goal nr. 14 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.21
  solved goal nr. 22 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.25
  solved goal nr. 22 (directly): RA_r_login( ~ra_r_key.10 ) ▶₁ #vr.28
  solved goal nr. 17 (directly): !L12( platform_sec.10 ) ▶₂ #vr.27
  solved goal nr. 23 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.25
  solved goal nr. 23 (directly):
    Start_thread_e_data_req( platform_sec.10, mrsigner.10,
                             mrenclave.10, ~p_id.10
    ) ▶₂ #vr.28
  solved goal nr. 25 (directly): !Indexes( index_req.32 ) ▶₀ #vr.31
  solved goal nr. 25 (directly): !Indexes( index_req.35 ) ▶₀ #vr.34
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.7, mrsigner.7, mrenclave.7, ~p_id.7,
             ~ra_r_key.7, index_req.7
    ) ▶₁ #vr.6
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 31 (directly): !L12( platform_sec.7 ) ▶₂ #vr.39
  solved goal nr. 27 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.37
  solved goal nr. 22 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.25
  solved goal nr. 14 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.21
  solved goal nr. 30 (directly): !L12( platform_sec.7 ) ▶₂ #vr.40
  solved goal nr. 30 (directly): !L12( platform_sec.10 ) ▶₂ #vr.43
  solved goal nr. 18 (directly): !L12( platform_sec.10 ) ▶₂ #vr.26
  solved goal nr. 23 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.25
  solved goal nr. 25 (directly): !Indexes( index_req.32 ) ▶₀ #vr.31
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 30 (directly): !L12( platform_sec.7 ) ▶₂ #vr.40
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 27 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.37
  solved goal nr. 31 (directly): !L12( platform_sec.7 ) ▶₂ #vr.39
  solved goal nr. 31 (directly): !L12( platform_sec.10 ) ▶₂ #vr.42
  solved goal nr. 7 (directly):
    !DB_mem( index_req.10, sealed_cipher.10 ) ▶₁ #vr.9
  solved goal nr. 27 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.34
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.10, mrsigner.10, mrenclave.10, ~p_id.10,
             ~ra_r_key.10, index_req.10
    ) ▶₁ #vr.9
  solved goal nr. 31 (directly): !L12( platform_sec.7 ) ▶₂ #vr.39
  solved goal nr. 16 (directly): RA_r_login( ~ra_r_key.10 ) ▶₁ #vr.21
  solved goal nr. 17 (directly):
    Start_thread_e_data_req( platform_sec.10, mrsigner.10,
                             mrenclave.10, ~p_id.10
    ) ▶₂ #vr.21
  solved goal nr. 19 (directly): !Indexes( index_req.28 ) ▶₀ #vr.27
  solved goal nr. 21 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.30
  solved goal nr. 24 (directly): !L12( platform_sec.10 ) ▶₂ #vr.36
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.7, mrsigner.7, mrenclave.7, ~p_id.7,
             ~ra_r_key.7, index_req.7
    ) ▶₁ #vr.6
  solved goal nr. 20 (directly): RA_r_login( ~ra_r_key.7 ) ▶₁ #vr.22
  solved goal nr. 21 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.30
  solved goal nr. 25 (directly): !L12( platform_sec.10 ) ▶₂ #vr.35
  solved goal nr. 21 (directly):
    Start_thread_e_data_req( platform_sec.7, mrsigner.7, mrenclave.7,
                             ~p_id.7
    ) ▶₂ #vr.22
  solved goal nr. 23 (directly): !Indexes( index_req.29 ) ▶₀ #vr.28
  solved goal nr. 25 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.31
  solved goal nr. 28 (directly): !L12( platform_sec.7 ) ▶₂ #vr.37
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.10, mrsigner.10, mrenclave.10, ~p_id.10,
             ~ra_r_key.10, index_req.10
    ) ▶₁ #vr.9
  solved goal nr. 25 (directly):
    !L23( platform_sec.7, mrsigner.7, mrenclave.7 ) ▶₀ #vr.31
  solved goal nr. 22 (directly): RA_r_login( ~ra_r_key.10 ) ▶₁ #vr.28
  solved goal nr. 29 (directly): !L12( platform_sec.7 ) ▶₂ #vr.36
  solved goal nr. 23 (directly):
    Start_thread_e_data_req( platform_sec.10, mrsigner.10,
                             mrenclave.10, ~p_id.10
    ) ▶₂ #vr.28
  solved goal nr. 25 (directly): !Indexes( index_req.35 ) ▶₀ #vr.34
  solved goal nr. 27 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.37
  solved goal nr. 30 (directly): !L12( platform_sec.10 ) ▶₂ #vr.43
  solved goal nr. 27 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.37
  solved goal nr. 31 (directly): !L12( platform_sec.10 ) ▶₂ #vr.42
  solved goal nr. 7 (directly):
    EPC_E_r( platform_sec.10, mrsigner.10, mrenclave.10, ~p_id.10,
             ~ra_r_key.10, index_req.10
    ) ▶₁ #vr.9
  solved goal nr. 16 (directly): RA_r_login( ~ra_r_key.10 ) ▶₁ #vr.21
  solved goal nr. 17 (directly):
    Start_thread_e_data_req( platform_sec.10, mrsigner.10,
                             mrenclave.10, ~p_id.10
    ) ▶₂ #vr.21
  solved goal nr. 19 (directly): !Indexes( index_req.28 ) ▶₀ #vr.27
  solved goal nr. 21 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.30
  solved goal nr. 24 (directly): !L12( platform_sec.10 ) ▶₂ #vr.36
  solved goal nr. 21 (directly):
    !L23( platform_sec.10, mrsigner.10, mrenclave.10 ) ▶₀ #vr.30
  solved goal nr. 25 (directly): !L12( platform_sec.10 ) ▶₂ #vr.35
  solved goal nr. 0 (directly):
     (∃ x m #i.
       (AUTO_IN_1_1_E_o_decrypt( m, x ) @ #i)
      ∧
       (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
       (∀ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
     (∃ x m #i.
       (AUTO_IN_2_1_E_o_decrypt( m, x ) @ #i)
      ∧
       (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
       (∀ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
     (∃ x m #i.
       (AUTO_IN_3_1_E_r_data_req( m, x ) @ #i)
      ∧
       (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
       (∀ #j. (AUTO_OUT_0_1_RCHR_data_req( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
     (∃ x m #i.
       (AUTO_IN_5_1_E_r_data_resp( m, x ) @ #i)
      ∧
       (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
       (∀ #j. (AUTO_OUT_0_1_E_o_upload( m ) @ #j) ⇒ ¬(#j < #i)))
  solved goal nr. 1 (directly):
    AUTO_IN_1_1_E_o_decrypt( m.1, x ) @ #i.2
  solved goal nr. 1 (directly):
    AUTO_IN_2_1_E_o_decrypt( m.1, x ) @ #i.2
  solved goal nr. 1 (directly):
    AUTO_IN_3_1_E_r_data_req( m.1, x ) @ #i.2
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, 
                                      data_rcvd.10>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 25 (directly):
     (∃ #j. (!KU( oname_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 25 (directly):
     (∃ #j. (!KU( oname_rcvd.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, 
                                      data_rcvd.10>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 1 (directly):
    AUTO_IN_5_1_E_r_data_resp( m.1, x ) @ #i.2
  solved goal nr. 25 (directly):
     (∃ #j. (!KU( oname_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.48
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, data_rcvd.10
                                 >,
                                 ~ra_o_key.10)
    ) @ #j.51
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.48
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, data_rcvd.10
                                 >,
                                 ~ra_o_key.10)
    ) @ #j.50
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, 
                                      data_rcvd.10>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, data_rcvd.10
                                 >,
                                 ~ra_o_key.10)
    ) @ #j.50
  solved goal nr. 8 (directly):
     (last(#i))  ∥
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #i))
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 8 (directly):
     (last(#i))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', x, data_rcvd>, ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #i))
  simplified formula:
      "((last(#i)) ∨
        (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #i)))"
    to
      "⊤"
  simplified formula:
      "((last(#i)) ∨
        (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', x, data_rcvd>, ~ra_o_key)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #i)))"
    to
      "⊤"
  solved goal nr. 9 (simplified):
     (last(#i))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #i))
  solved goal nr. 9 (simplified):
     (last(#i))  ∥
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', x, data_rcvd>, ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #i))
  solved goal nr. 7 (directly):
     (last(#i))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, x>,
                                      h(<platform_sec, mrsigner, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #i))
  solved goal nr. 8 (directly):
     (last(#i))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', x>, ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #i))
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  solved goal nr. 9 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  solved goal nr. 11 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  solved goal nr. 11 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 10 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  solved goal nr. 10 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  solved goal nr. 12 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 11 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, 
                                      data_rcvd.10>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 19 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 20 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 25 (directly):
     (∃ #j. (!KU( oname_rcvd.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, 
                                      data_rcvd.10>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 19 (directly):
     (∃ #j. (!KU( index_req.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 19 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, data_rcvd.10
                                 >,
                                 ~ra_o_key.10)
    ) @ #j.51
  solved goal nr. 20 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                     ~ra_r_key.10)
    ) @ #j.50
  solved goal nr. 20 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 8 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, x>,
                                  h(<platform_sec, mrsigner, 'seal'>))
    ) @ #j.3
  solved goal nr. 20 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  solved goal nr. 9 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  solved goal nr. 10 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', x, data_rcvd>, ~ra_o_key)
    ) @ #j.3
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  solved goal nr. 21 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 11 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  simplified formula:
      "((last(#j.3)) ∨
        (∃ #j.4.
          (!KU( oname_sealed ) @ #j.4) ∧ (¬(last(#j.4))) ∧ (#j.4 < #j.3)) ∨
        (∃ #j.4.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.5)
           ) @ #j.4)
         ∧
          (¬(last(#j.4))) ∧ (#j.4 < #j.3)))"
    to
      "((∃ #j.4.
          (!KU( oname_sealed ) @ #j.4) ∧ (¬(last(#j.4))) ∧ (#j.4 < #j.3)) ∨
        (∃ #j.4.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.5)
           ) @ #j.4)
         ∧
          (¬(last(#j.4))) ∧ (#j.4 < #j.3)))"
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, data_rcvd.10
                                 >,
                                 ~ra_o_key.10)
    ) @ #j.50
  solved goal nr. 16 (simplified):
     (last(#j.3))  ∥
     (∃ #j.4.
       (!KU( oname_sealed ) @ #j.4) ∧ (¬(last(#j.4))) ∧ (#j.4 < #j.3))  ∥
     (∃ #j.4.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.5)
        ) @ #j.4)
      ∧
       (¬(last(#j.4))) ∧ (#j.4 < #j.3))
  solved goal nr. 10 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
    ) @ #j.3
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 14 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  solved goal nr. 11 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  simplified formula:
      "((last(#j.3)) ∨
        (∃ #j.4. (!KU( x ) @ #j.4) ∧ (¬(last(#j.4))) ∧ (#j.4 < #j.3)) ∨
        (∃ #j.4.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.5)
           ) @ #j.4)
         ∧
          (¬(last(#j.4))) ∧ (#j.4 < #j.3)))"
    to
      "((∃ #j.4. (!KU( x ) @ #j.4) ∧ (¬(last(#j.4))) ∧ (#j.4 < #j.3)) ∨
        (∃ #j.4.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.5)
           ) @ #j.4)
         ∧
          (¬(last(#j.4))) ∧ (#j.4 < #j.3)))"
  solved goal nr. 25 (directly):
     (∃ #j. (!KU( oname_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 17 (simplified):
     (last(#j.3))  ∥
     (∃ #j.4. (!KU( x ) @ #j.4) ∧ (¬(last(#j.4))) ∧ (#j.4 < #j.3))  ∥
     (∃ #j.4.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.5)
        ) @ #j.4)
      ∧
       (¬(last(#j.4))) ∧ (#j.4 < #j.3))
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 25 (directly):
     (∃ #j. (!KU( oname_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 14 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 20 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.48
  solved goal nr. 9 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', x>, ~ra_r_key)
    ) @ #j.3
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.48
  simplified formula:
      "((#last.4 < #j.3) ∨ (#j.3 < #last.4))"
    to
      "#j.3 < #last.4"
  solved goal nr. 10 (simplified):
     (#last.4 < #j.3)  ∥ (#j.3 < #last.4)
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 13 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, 
                                      data_rcvd.10>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.10, data_rcvd.10
                                 >,
                                 ~ra_o_key.10)
    ) @ #j.50
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 20 (directly):
     (∃ #j. (!KU( index_req.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 21 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                     ~ra_r_key.10)
    ) @ #j.50
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 6 (precomputed):
    Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id
    ) ▶₁ #i
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 19 (directly):
     (∃ #j. (!KU( index_req.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 9 (directly):
     (last(#i))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #i))
  solved goal nr. 20 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                     ~ra_r_key.10)
    ) @ #j.50
  simplified formula:
      "((#last < #j.3) ∨ (#j.3 < #last))"
    to
      "#j.3 < #last"
  solved goal nr. 13 (simplified): (#last < #j.3)  ∥ (#j.3 < #last)
  solved goal nr. 20 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( data_rcvd.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7
                                     >,
                                     ~ra_o_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 14 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  solved goal nr. 21 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 6 (precomputed):
    Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id
    ) ▶₁ #i
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.7>,
                                 ~ra_o_key.7)
    ) @ #j.47
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
    ) @ #j.47
  solved goal nr. 6 (precomputed): RA_r_login( ~ra_r_key ) ▶₁ #i
  solved goal nr. 19 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 20 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 39 (directly):
    Start_thread_e_upload( ~platform_sec.45, ~mrsigner.41,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 7 (precomputed): RA_o_login( ~ra_o_key ) ▶₂ #i
  solved goal nr. 20 (directly):
     (∃ #j. (!KU( index_req.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                      h(<~platform_sec.48, ~mrsigner.44, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 19 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 40 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 20 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 21 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.10>,
                                     ~ra_r_key.10)
    ) @ #j.50
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                  h(<~platform_sec.48, ~mrsigner.44, 'seal'>))
    ) @ #j.50
  solved goal nr. 44 (directly):
    !L23( ~platform_sec.45, ~mrsigner.41, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 12 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
    ) @ #j.3
  simplified formula:
      "((#last < #j.3) ∨ (#j.3 < #last))"
    to
      "#j.3 < #last"
  solved goal nr. 13 (simplified): (#last < #j.3)  ∥ (#j.3 < #last)
  solved goal nr. 39 (directly):
    Start_thread_e_upload( ~platform_sec.48, ~mrsigner.44,
                           mrenclave.51, ~p_id.51
    ) ▶₁ #j.50
  simplified formula:
      "((#j.3 = #i) ∨ (#i < #j.3))"
    to
      "⊥"
  solved goal nr. 16 (simplified): (#j.3 = #i)  ∥ (#i < #j.3)
  solved goal nr. 40 (directly): RA_o_login( ~ra_o_key.51 ) ▶₂ #j.50
  solved goal nr. 20 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 20 (directly):
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.7)
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 46 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 21 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 44 (directly):
    !L23( ~platform_sec.48, ~mrsigner.44, mrenclave.51 ) ▶₀ #vr.56
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 21 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                     ~ra_r_key.7)
    ) @ #j.47
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
    ) @ #j.47
  solved goal nr. 39 (directly):
    Start_thread_e_upload( ~platform_sec.45, ~mrsigner.41,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 46 (directly): !OMem( oname.60 ) ▶₂ #vr.59
  solved goal nr. 42 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 40 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 4 (precomputed):
    !KU( senc(<'upload', x, data_rcvd>, ~ra_o_key) ) @ #vk.1
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 42 (directly):
     (∃ #j.51. (!KU( data_sealed.10 ) @ #j.51) ∧ #j.51 < #j.50)  ∥
     (∃ #j.51.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                      data_sealed.10>,
                                     ~ra_o_key.51)
        ) @ #j.51)
      ∧
       #j.51 < #j.50)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 44 (directly):
    !L23( ~platform_sec.45, ~mrsigner.41, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
    ) @ #j.47
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.45, ~mrsigner.41, 'seal'>))
    ) @ #j.47
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                      h(<~platform_sec.48, ~mrsigner.44, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                  data_sealed.10>,
                                 ~ra_o_key.51)
    ) @ #j.70
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                  h(<~platform_sec.48, ~mrsigner.44, 'seal'>))
    ) @ #j.50
  solved goal nr. 39 (directly):
    Start_thread_e_upload( ~platform_sec.45, ~mrsigner.41,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 39 (directly):
    Start_thread_e_upload( ~platform_sec.45, ~mrsigner.41,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 40 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 39 (directly):
    Start_thread_e_upload( ~platform_sec.48, ~mrsigner.44,
                           mrenclave.51, ~p_id.51
    ) ▶₁ #j.50
  solved goal nr. 40 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 44 (directly):
    !L23( ~platform_sec.45, ~mrsigner.41, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 46 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 40 (directly): RA_o_login( ~ra_o_key.51 ) ▶₂ #j.50
  solved goal nr. 44 (directly):
    !L23( ~platform_sec.45, ~mrsigner.41, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 42 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 46 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 44 (directly):
    !L23( ~platform_sec.48, ~mrsigner.44, mrenclave.51 ) ▶₀ #vr.56
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 42 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 46 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 46 (directly): !OMem( oname.60 ) ▶₂ #vr.59
  solved goal nr. 42 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 42 (directly):
     (∃ #j.51. (!KU( data_sealed.10 ) @ #j.51) ∧ #j.51 < #j.50)  ∥
     (∃ #j.51.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                      data_sealed.10>,
                                     ~ra_o_key.51)
        ) @ #j.51)
      ∧
       #j.51 < #j.50)
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( data_sealed.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                      h(<~platform_sec.47, ~mrsigner.43, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
    ) @ #j.47
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                  data_sealed.10>,
                                 ~ra_o_key.51)
    ) @ #j.70
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                  h(<~platform_sec.47, ~mrsigner.43, 'seal'>))
    ) @ #j.50
  solved goal nr. 40 (directly):
    Start_thread_e_upload( ~platform_sec.44, ~mrsigner.40,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 40 (directly):
    Start_thread_e_upload( ~platform_sec.47, ~mrsigner.43,
                           mrenclave.51, ~p_id.51
    ) ▶₁ #j.50
  solved goal nr. 41 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 41 (directly): RA_o_login( ~ra_o_key.51 ) ▶₂ #j.50
  simplified formula:
      "((#vk.12 = #i) ∨ (#i < #vk.12))"
    to
      "⊥"
  solved goal nr. 22 (simplified): (#vk.12 = #i)  ∥ (#i < #vk.12)
  solved goal nr. 45 (directly):
    !L23( ~platform_sec.44, ~mrsigner.40, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 45 (directly):
    !L23( ~platform_sec.47, ~mrsigner.43, mrenclave.51 ) ▶₀ #vr.56
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
    ) @ #j.47
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
    ) @ #j.47
  simplified formula:
      "((#vr.11 = #i) ∨ (#i < #vr.11))"
    to
      "⊥"
  solved goal nr. 17 (simplified): (#vr.11 = #i)  ∥ (#i < #vr.11)
  solved goal nr. 40 (directly):
    Start_thread_e_upload( ~platform_sec.44, ~mrsigner.40,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 40 (directly):
    Start_thread_e_upload( ~platform_sec.44, ~mrsigner.40,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 47 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 41 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 47 (directly): !OMem( oname.60 ) ▶₂ #vr.59
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( data_sealed.7 ) @ #j) ∧ #j < #vr.6)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                      h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.6)
  solved goal nr. 41 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 43 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.7, data_sealed.7>,
                                  h(<~platform_sec.44, ~mrsigner.40, 'seal'>))
    ) @ #j.47
  solved goal nr. 45 (directly):
    !L23( ~platform_sec.44, ~mrsigner.40, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 45 (directly):
    !L23( ~platform_sec.44, ~mrsigner.40, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 43 (directly):
     (∃ #j.51. (!KU( data_sealed.10 ) @ #j.51) ∧ #j.51 < #j.50)  ∥
     (∃ #j.51.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                      data_sealed.10>,
                                     ~ra_o_key.51)
        ) @ #j.51)
      ∧
       #j.51 < #j.50)
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( data_sealed.10 ) @ #j) ∧ #j < #vr.9)  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                      h(<~platform_sec.47, ~mrsigner.43, 'seal'>))
        ) @ #j)
      ∧
       #j < #vr.9)
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.10>,
                                  h(<~platform_sec.47, ~mrsigner.43, 'seal'>))
    ) @ #j.50
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                  data_sealed.10>,
                                 ~ra_o_key.51)
    ) @ #j.70
  solved goal nr. 40 (directly):
    Start_thread_e_upload( ~platform_sec.44, ~mrsigner.40,
                           mrenclave.48, ~p_id.48
    ) ▶₁ #j.47
  solved goal nr. 47 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 40 (directly):
    Start_thread_e_upload( ~platform_sec.47, ~mrsigner.43,
                           mrenclave.51, ~p_id.51
    ) ▶₁ #j.50
  solved goal nr. 41 (directly): RA_o_login( ~ra_o_key.48 ) ▶₂ #j.47
  solved goal nr. 47 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 43 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 41 (directly): RA_o_login( ~ra_o_key.51 ) ▶₂ #j.50
  solved goal nr. 45 (directly):
    !L23( ~platform_sec.44, ~mrsigner.40, mrenclave.48 ) ▶₀ #vr.53
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 43 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 45 (directly):
    !L23( ~platform_sec.47, ~mrsigner.43, mrenclave.51 ) ▶₀ #vr.56
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 47 (directly): !OMem( oname.57 ) ▶₂ #vr.56
  solved goal nr. 43 (directly):
     (∃ #j.48. (!KU( data_sealed.7 ) @ #j.48) ∧ #j.48 < #j.47)  ∥
     (∃ #j.48.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                      data_sealed.7>,
                                     ~ra_o_key.48)
        ) @ #j.48)
      ∧
       #j.48 < #j.47)
  solved goal nr. 47 (directly): !OMem( oname.60 ) ▶₂ #vr.59
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.7, 
                                  data_sealed.7>,
                                 ~ra_o_key.48)
    ) @ #j.67
  solved goal nr. 43 (directly):
     (∃ #j.51. (!KU( data_sealed.10 ) @ #j.51) ∧ #j.51 < #j.50)  ∥
     (∃ #j.51.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                      data_sealed.10>,
                                     ~ra_o_key.51)
        ) @ #j.51)
      ∧
       #j.51 < #j.50)
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 26 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.10, 
                                  data_sealed.10>,
                                 ~ra_o_key.51)
    ) @ #j.70
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 27 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 26 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 27 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 25 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 26 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 2 (directly):
     (#RCHR_data_rcv1 < #RCHR_data_rcv2)  ∥
     (#RCHR_data_rcv2 < #RCHR_data_rcv1)
  solved goal nr. 2 (directly):
     (#E_r_data_reply_ex_x1 < #E_r_data_reply_ex_x2)  ∥
     (#E_r_data_reply_ex_x2 < #E_r_data_reply_ex_x1)
  solved goal nr. 15 (precomputed): !OMem( ~oname ) ▶₂ #do_upload
  solved goal nr. 19 (precomputed): !OMem( ~oname ) ▶₂ #do_upload1
  solved goal nr. 2 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req ) ▶₀ #RCHR_data_rcv
  solved goal nr. 5 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req_x ) ▶₀ #RCHR_data_rcv_x
  solved goal nr. 15 (precomputed): !OMem( ~oname ) ▶₂ #do_upload
  solved goal nr. 3 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req ) ▶₀ #RCHR_data_rcv
  solved goal nr. 4 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req1 ) ▶₀ #RCHR_data_rcv1
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 7 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req_x1
    ) ▶₁ #E_r_data_reply_ex_x1
  solved goal nr. 31 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 18 (precomputed):
    !L12( ~platform_sec ) ▶₂ #L2_mrsigner_mrenclave
  solved goal nr. 30 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  solved goal nr. 21 (precomputed): !OMem( ~oname ) ▶₂ #do_upload2
  solved goal nr. 18 (precomputed):
    !L12( ~platform_sec ) ▶₂ #L2_mrsigner_mrenclave
  solved goal nr. 11 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2
  solved goal nr. 20 (precomputed):
    !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process
  solved goal nr. 13 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req_x
    ) ▶₁ #E_r_data_reply_ex_x
  solved goal nr. 11 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2
  solved goal nr. 6 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 20 (precomputed):
    !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process
  solved goal nr. 32 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  solved goal nr. 12 (precomputed):
    EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
             ~ra_r_key, index_req_x2
    ) ▶₁ #E_r_data_reply_ex_x2
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 31 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  solved goal nr. 24 (precomputed):
    !L12( ~platform_sec ) ▶₂ #L2_mrsigner_mrenclave
  solved goal nr. 12 (precomputed):
    Mem_RCHR( ~ra_r_key.1, index_req_y ) ▶₀ #RCHR_data_rcv_y
  solved goal nr. 4 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req1 ) ▶₀ #RCHR_data_rcv1
  solved goal nr. 25 (precomputed):
    Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id
    ) ▶₁ #E_o_decrypt_upload
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 25 (precomputed):
    Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id
    ) ▶₁ #E_o_decrypt_upload
  solved goal nr. 11 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2
  solved goal nr. 12 (precomputed):
    EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
             ~ra_r_key, index_req_x2
    ) ▶₁ #E_r_data_reply_ex_x2
  solved goal nr. 7 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3
  solved goal nr. 26 (precomputed):
    !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process1
  solved goal nr. 26 (precomputed):
    RA_o_login( ~ra_o_key ) ▶₂ #E_o_decrypt_upload
  solved goal nr. 7 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req_x1
    ) ▶₁ #E_r_data_reply_ex_x1
  solved goal nr. 26 (precomputed):
    RA_o_login( ~ra_o_key ) ▶₂ #E_o_decrypt_upload
  solved goal nr. 11 (precomputed):
    Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2
  solved goal nr. 12 (precomputed): !KU( ~ra_r_key ) @ #vk.6
  solved goal nr. 28 (precomputed):
    !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process2
  solved goal nr. 32 (precomputed):
    RA_r_login( ~ra_r_key ) ▶₁ #E_r_data_req
  solved goal nr. 32 (precomputed):
    RA_r_login( ~ra_r_key ) ▶₁ #E_r_data_req
  solved goal nr. 12 (precomputed):
    Mem_RCHR( ~ra_r_key.1, index_req_y ) ▶₀ #RCHR_data_rcv_y
  solved goal nr. 28 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 33 (precomputed):
    Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id
    ) ▶₁ #E_o_decrypt_upload1
  solved goal nr. 30 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 22 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req_x
    ) ▶₁ #E_r_data_reply_ex_x
  solved goal nr. 13 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req_x
    ) ▶₁ #E_r_data_reply_ex_x
  solved goal nr. 28 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 12 (precomputed):
    EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
             ~ra_r_key, index_req_x2
    ) ▶₁ #E_r_data_reply_ex_x2
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 30 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 33 (precomputed):
    Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                             ~p_id
    ) ▶₂ #E_r_data_req
  solved goal nr. 34 (precomputed):
    RA_o_login( ~ra_o_key ) ▶₂ #E_o_decrypt_upload1
  solved goal nr. 33 (precomputed):
    Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                             ~p_id
    ) ▶₂ #E_r_data_req
  solved goal nr. 12 (precomputed):
    !KU( senc(<oname_sealed, data_rcvd>,
              h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.7
  solved goal nr. 12 (precomputed):
    EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
             ~ra_r_key, index_req_x2
    ) ▶₁ #E_r_data_reply_ex_x2
  solved goal nr. 6 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3
  solved goal nr. 33 (precomputed):
    Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                             ~p_id
    ) ▶₂ #E_r_data_req
  solved goal nr. 33 (precomputed):
    Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                             ~p_id
    ) ▶₂ #E_r_data_req
  solved goal nr. 39 (precomputed):
    Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave,
                           ~p_id.1
    ) ▶₁ #E_o_decrypt_upload2
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 28 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 38 (precomputed):
    !DB_mem( index_req,
             senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) ▶₁ #db_retrieve
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.15
  solved goal nr. 27 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 28 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 29 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.14
  solved goal nr. 38 (precomputed):
    !DB_mem( index_req,
             senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) ▶₁ #db_retrieve
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 29 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 32 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 43 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 42 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 40 (precomputed):
    RA_o_login( ~ra_o_key.1 ) ▶₂ #E_o_decrypt_upload2
  solved goal nr. 29 (directly):
     (∃ #j. (!KU( data_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 39 (precomputed):
    Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 7 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 32 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 39 (precomputed):
    Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 44 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 43 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 46 (precomputed):
    RA_r_login( ~ra_r_key ) ▶₁ #E_r_data_req
  solved goal nr. 44 (precomputed):
    EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
             ('1'+i)
    ) ▶₁ #E_r_data_resp
  solved goal nr. 44 (precomputed):
    EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
             ('1'+i)
    ) ▶₁ #E_r_data_resp
  solved goal nr. 13 (precomputed): !KU( ~ra_r_key ) @ #vk.6
  solved goal nr. 7 (precomputed): RA_o_login( ~ra_o_key ) ▶₂ #i
  solved goal nr. 47 (precomputed):
    Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                             ~p_id
    ) ▶₂ #E_r_data_req
  solved goal nr. 47 (precomputed):
    Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                             ~p_id
    ) ▶₂ #E_r_data_req
  solved goal nr. 46 (precomputed):
    Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp
  solved goal nr. 46 (precomputed):
    Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp
  solved goal nr. 23 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9
  solved goal nr. 33 (precomputed): !KU( ~ra_r_key ) @ #vk.12
  solved goal nr. 4 (precomputed):
    !KU( senc(<'upload', oname_rcvd, x>, ~ra_o_key) ) @ #vk.1
  solved goal nr. 23 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9
  solved goal nr. 55 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_y.22, sealed_e_return_y.23
    ) @ #E_r_data_reply_ex_y.24
  solved goal nr. 22 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req_x
    ) ▶₁ #E_r_data_reply_ex_x
  solved goal nr. 52 (precomputed):
    !DB_mem( index_req,
             senc(<~oname, ~data.1>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) ▶₁ #db_retrieve
  solved goal nr. 51 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_y.23, sealed_e_return_y.24
    ) @ #E_r_data_reply_ex_y.25
  solved goal nr. 22 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req_x
    ) ▶₁ #E_r_data_reply_ex_x
  simplified formula:
      "((#vk.13 = #i) ∨ (#i < #vk.13))"
    to
      "⊥"
  solved goal nr. 22 (simplified): (#vk.13 = #i)  ∥ (#i < #vk.13)
  simplified formula:
      "((#vr.11 = #i) ∨ (#i < #vr.11))"
    to
      "⊥"
  solved goal nr. 17 (simplified): (#vr.11 = #i)  ∥ (#i < #vr.11)
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 52 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 56 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 7 (directly):
    DB_store( ~p_id, ptrIndex2, ('1'+'1'), ptrIndex3, ('1'+'1'+'1'),
              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store
  solved goal nr. 7 (directly):
    DB_store( ~p_id, ~ptr, '1', ptrIndex2, ('1'+'1'),
              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store
  solved goal nr. 53 (precomputed):
    Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 26 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 27 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  solved goal nr. 97 (precomputed):
    Start_thread_db_upload( ~p_id ) ▶₁ #db_store
  solved goal nr. 97 (precomputed):
    Start_thread_db_upload( ~p_id ) ▶₁ #db_store
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 26 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 27 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  solved goal nr. 58 (precomputed):
    EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
             ('1'+i)
    ) ▶₁ #E_r_data_resp
  solved goal nr. 27 (precomputed):
    EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
             ~ra_r_key.1, index_req_x.1
    ) ▶₁ #E_r_data_reply_ex_x.1
  solved goal nr. 8 (directly):
    RCHR_data_req( ~ra_r_key, ('1'+'1'),
                   senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key),
                   senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)), ~ra_r_key)
    ) @ #rchr_data_req_11
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 25 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 27 (precomputed):
    EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
             ~ra_r_key.1, index_req_x.1
    ) ▶₁ #E_r_data_reply_ex_x.1
  solved goal nr. 55 (precomputed): !KU( ~ra_r_key ) @ #vk.15
  solved goal nr. 8 (directly):
    RCHR_data_req( ~ra_r_key, ('1'+'1'),
                   senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key),
                   senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)), ~ra_r_key)
    ) @ #rchr_data_req_11
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 26 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 31 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 30 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  solved goal nr. 60 (precomputed):
    Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp
  solved goal nr. 9 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.4
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 72 (precomputed): !DB_index( ptr.1, '1' ) ▶₂ #vr.1
  solved goal nr. 32 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 31 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  solved goal nr. 72 (precomputed): !DB_index( ptr.1, '1' ) ▶₂ #vr.1
  solved goal nr. 52 (precomputed):
    !DB_mem( index_req,
             senc(<~oname, ~data.1>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) ▶₁ #db_retrieve
  solved goal nr. 38 (precomputed):
    !DB_mem( index_req,
             senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) ▶₁ #db_retrieve
  solved goal nr. 10 (directly):
    DB_store( ~p_id, ~ptr, '1', ptrIndex2, ('1'+'1'),
              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store1
  solved goal nr. 38 (precomputed):
    !DB_mem( index_req,
             senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) ▶₁ #db_retrieve
  solved goal nr. 51 (precomputed): !KU( ~ra_r_key ) @ #vk.16
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 28 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 28 (directly):
     (∃ #j.
       (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 28 (directly):
     (∃ #j.
       (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 28 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 30 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                 ~ra_o_key.1)
    ) @ #j.16
  solved goal nr. 30 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 31 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 27 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 29 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 39 (precomputed):
    Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.14
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 29 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 39 (precomputed):
    Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve
  solved goal nr. 53 (precomputed):
    Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve
  solved goal nr. 32 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 44 (precomputed):
    EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
             ('1'+i)
    ) ▶₁ #E_r_data_resp
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 44 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 29 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 44 (precomputed):
    EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
             ('1'+i)
    ) ▶₁ #E_r_data_resp
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 43 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 32 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 43 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 42 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 12 (precomputed):
    !KU( senc(<oname_sealed, data_rcvd>,
              h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.7
  solved goal nr. 36 (precomputed): !KU( ~ra_r_key ) @ #vk.12
  solved goal nr. 46 (precomputed):
    Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp
  solved goal nr. 46 (precomputed):
    Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp
  solved goal nr. 67 (precomputed): !KU( ~ra_r_key ) @ #vk.21
  solved goal nr. 58 (precomputed):
    EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
             ('1'+i)
    ) ▶₁ #E_r_data_resp
  solved goal nr. 16 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd.1>, ~ra_r_key.1) ) @ #vk.7
  solved goal nr. 6 (precomputed):
    Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id
    ) ▶₁ #i
  solved goal nr. 24 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9
  solved goal nr. 24 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9
  solved goal nr. 7 (directly):
    DB_store( ~p_id, ~ptr, '1', ptrIndex2, ('1'+'1'),
              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 7 (precomputed): RA_o_login( ~ra_o_key ) ▶₂ #i
  solved goal nr. 7 (directly):
    DB_store( ~p_id, ptrIndex2, ('1'+'1'), ptrIndex3, ('1'+'1'+'1'),
              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store
  solved goal nr. 58 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_y.23, sealed_e_return_y.24
    ) @ #E_r_data_reply_ex_y.25
  solved goal nr. 62 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_y.22, sealed_e_return_y.23
    ) @ #E_r_data_reply_ex_y.24
  solved goal nr. 102 (precomputed):
    Start_thread_db_upload( ~p_id ) ▶₁ #db_store
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 59 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 4 (precomputed):
    !KU( senc(<'upload', oname_rcvd, x>, ~ra_o_key) ) @ #vk.1
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 63 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 102 (precomputed):
    Start_thread_db_upload( ~p_id ) ▶₁ #db_store
  solved goal nr. 60 (precomputed):
    Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp
  simplified formula:
      "((#vk.13 = #i) ∨ (#i < #vk.13))"
    to
      "⊥"
  solved goal nr. 24 (simplified): (#vk.13 = #i)  ∥ (#i < #vk.13)
  solved goal nr. 8 (directly):
    RCHR_data_req( ~ra_r_key, ('1'+i),
                   senc(<'RCHR_data_req', ('1'+i)>, ~ra_r_key),
                   senc(h(senc(<'RCHR_data_req', ('1'+i)>, ~ra_r_key)), ~ra_r_key)
    ) @ #rchr_data_req_11
  simplified formula:
      "((#vr.11 = #i) ∨ (#i < #vr.11))"
    to
      "⊥"
  solved goal nr. 20 (simplified): (#vr.11 = #i)  ∥ (#i < #vr.11)
  solved goal nr. 80 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.21
  solved goal nr. 21 (precomputed):
    !KU( senc(<oname_sealed, data_rcvd>,
              h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.12
  solved goal nr. 8 (directly):
    RCHR_data_req( ~ra_r_key, ('1'+i),
                   senc(<'RCHR_data_req', ('1'+i)>, ~ra_r_key),
                   senc(h(senc(<'RCHR_data_req', ('1'+i)>, ~ra_r_key)), ~ra_r_key)
    ) @ #rchr_data_req_11
  solved goal nr. 60 (precomputed): !KU( ~ra_r_key ) @ #vk.15
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 28 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 29 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  solved goal nr. 119 (precomputed):
    Start_thread_db_upload( ~p_id ) ▶₁ #db_store1
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 28 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 29 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  solved goal nr. 64 (precomputed): !Indexes( i ) ▶₀ #vr
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 27 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 11 (directly):
    DB_store( ~p_id.1, ~ptr_new, ('1'+'1'), ptrIndex3, ('1'+'1'+'1'),
              senc(<~oname, ~data.1>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store2
  solved goal nr. 64 (precomputed): !Indexes( i ) ▶₀ #vr
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 28 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 98 (precomputed):
    !DB_index( ~ptr, '1' ) ▶₂ #db_store
  solved goal nr. 26 (precomputed):
    !KU( senc(<oname_sealed.1, data_sealed>,
              h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #vk.13
  solved goal nr. 56 (precomputed): !KU( ~ra_r_key ) @ #vk.16
  solved goal nr. 26 (precomputed):
    !KU( senc(<oname_sealed.1, data_sealed>,
              h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #vk.13
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 33 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 32 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  solved goal nr. 129 (precomputed):
    Start_thread_db_upload( ~p_id.1 ) ▶₁ #db_store2
  solved goal nr. 9 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.4
  solved goal nr. 23 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 34 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 98 (precomputed):
    !DB_index( ptrIndex2, ('1'+'1') ) ▶₂ #db_store
  solved goal nr. 33 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 12 (directly):
    RCHR_data_req( ~ra_r_key, ('1'+'1'),
                   senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key),
                   senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)), ~ra_r_key)
    ) @ #rchr_data_req_111
  solved goal nr. 7 (precomputed):
    Start_thread_e_data_req( platform_sec, mrsigner, mrenclave, ~p_id
    ) ▶₂ #i
  solved goal nr. 7 (precomputed):
    Start_thread_e_data_req( platform_sec, mrsigner, mrenclave, ~p_id
    ) ▶₂ #i
  solved goal nr. 114 (precomputed): !DB_index( ptr.2, '1' ) ▶₂ #vr.6
  solved goal nr. 4 (precomputed):
    !KU( senc(<'RCHR_data_req', x>, ~ra_r_key) ) @ #vk.1
  solved goal nr. 112 (precomputed): !KU( ~ra_o_key ) @ #vk.21
  solved goal nr. 24 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.2
  solved goal nr. 23 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1
  simplified formula:
      "((#vk.10 = #i) ∨ (#i < #vk.10))"
    to
      "⊥"
  solved goal nr. 19 (simplified): (#vk.10 = #i)  ∥ (#i < #vk.10)
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 25 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j. (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 67 (precomputed): !KU( ~ra_r_key ) @ #vk.21
  solved goal nr. 26 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  solved goal nr. 16 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd.1>, ~ra_r_key.1) ) @ #vk.7
  solved goal nr. 94 (precomputed): !DB_index( ptr.1, '1' ) ▶₂ #vr.1
  solved goal nr. 30 (precomputed):
    !KU( senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key) ) @ #vk.4
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 25 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  solved goal nr. 114 (precomputed): !KU( ~ra_o_key ) @ #vk.21
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j. (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 26 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((#vr = #i) ∨ (#i < #vr))"
    to
      "⊥"
  solved goal nr. 16 (simplified): (#vr = #i)  ∥ (#i < #vr)
  simplified formula:
      "((#vr.8 = #i) ∨ (#i < #vr.8))"
    to
      "⊥"
  solved goal nr. 17 (simplified): (#vr.8 = #i)  ∥ (#i < #vr.8)
  solved goal nr. 120 (precomputed):
    !DB_index( ~ptr, '1' ) ▶₂ #db_store1
  solved goal nr. 24 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.2
  solved goal nr. 120 (precomputed): !KU( ~ra_o_key ) @ #vk.23
  simplified formula:
      "((#vr.9 = #i) ∨ (#i < #vr.9))"
    to
      "⊥"
  solved goal nr. 17 (simplified): (#vr.9 = #i)  ∥ (#i < #vr.9)
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 24 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  solved goal nr. 130 (precomputed):
    !DB_index( ~ptr_new, ('1'+'1') ) ▶₂ #db_store2
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 25 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  solved goal nr. 21 (precomputed):
    !KU( senc(<oname_sealed, data_rcvd>,
              h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.12
  solved goal nr. 82 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.21
  solved goal nr. 31 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.5
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 30 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                      h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.22)) ∨
        (∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
    to
      "((∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
  solved goal nr. 29 (simplified):
     (last(#vr.22))  ∥
     (∃ #j.
       (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.22))
  solved goal nr. 116 (precomputed): !KU( ~ra_r_key ) @ #vk.21
  solved goal nr. 30 (precomputed):
    !KU( senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key) ) @ #vk.4
  solved goal nr. 31 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 31 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                      h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.22)) ∨
        (∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
    to
      "((∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
  solved goal nr. 30 (simplified):
     (last(#vr.22))  ∥
     (∃ #j.
       (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.22))
  solved goal nr. 122 (precomputed): !KU( ~ra_o_key ) @ #vk.23
  solved goal nr. 27 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 30 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 29 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 30 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 26 (precomputed):
    !KU( senc(<oname_sealed.1, data_sealed>,
              h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #vk.13
  solved goal nr. 43 (precomputed):
    !KU( senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.11
  solved goal nr. 27 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 30 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 29 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 30 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 118 (precomputed): !KU( ~ra_r_key ) @ #vk.21
  solved goal nr. 25 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 31 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.5
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 27 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 32 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.2
  solved goal nr. 27 (precomputed):
    EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
             ~ra_r_key.1, index_req_x.1
    ) ▶₁ #E_r_data_reply_ex_x.1
  solved goal nr. 26 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.14
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 27 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 153 (precomputed): !KU( ~ra_o_key ) @ #vk.26
  solved goal nr. 124 (precomputed): !KU( ~ra_r_key ) @ #vk.23
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 28 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.13
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 28 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 120 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key.1) ) @ #vk.21
  solved goal nr. 37 (precomputed):
    !KU( senc(<'upload', ~oname, ~data.1>, ~ra_o_key.1) ) @ #vk.4
  solved goal nr. 155 (precomputed): !KU( ~ra_o_key ) @ #vk.26
  solved goal nr. 31 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 43 (precomputed):
    !KU( senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.11
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 34 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 33 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 34 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 42 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 41 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 9 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.4
  solved goal nr. 121 (precomputed): !KU( ~oname ) @ #vk.22
  solved goal nr. 126 (precomputed): !KU( ~ra_r_key ) @ #vk.23
  solved goal nr. 50 (precomputed):
    !KU( senc(<'RCHR_data_resp', ~data>, ~ra_r_key) ) @ #vk.16
  solved goal nr. 32 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 43 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 42 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 38 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data.1>, ~ra_o_key.1)),
              ~ra_o_key.1)
    ) @ #vk.5
  solved goal nr. 157 (precomputed): !KU( ~ra_o_key.1 ) @ #vk.26
  solved goal nr. 128 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key.1) ) @ #vk.23
  solved goal nr. 16 (precomputed):
    !KU( senc(<'RCHR_data_resp', data_rcvd.1>, ~ra_r_key.1) ) @ #vk.7
  solved goal nr. 4 (precomputed):
    !KU( senc(<'RCHR_data_req', x>, ~ra_r_key) ) @ #vk.1
  solved goal nr. 129 (precomputed): !KU( ~ra_o_key.1 ) @ #vk.24
  simplified formula:
      "((#vk.9 = #i) ∨ (#i < #vk.9))"
    to
      "⊥"
  solved goal nr. 20 (simplified): (#vk.9 = #i)  ∥ (#i < #vk.9)
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( oname_rcvd.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 26 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( oname_rcvd.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                     >,
                                     ~ra_o_key.12)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j. (!KU( data_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 27 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                     >,
                                     ~ra_o_key.12)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  solved goal nr. 44 (precomputed):
    !KU( senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key) ) @ #vk.7
  solved goal nr. 51 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.17
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( oname_rcvd.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 26 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( oname_rcvd.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                     >,
                                     ~ra_o_key.12)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j. (!KU( data_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                        >,
                                        ~ra_o_key.12)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 27 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.7, data_rcvd.8
                                     >,
                                     ~ra_o_key.12)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  solved goal nr. 50 (precomputed):
    !KU( senc(<'RCHR_data_resp', ~data>, ~ra_r_key) ) @ #vk.16
  solved goal nr. 159 (precomputed): !KU( ~ra_o_key.1 ) @ #vk.26
  solved goal nr. 21 (precomputed):
    !KU( senc(<oname_sealed, data_rcvd>,
              h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.12
  simplified formula:
      "((#vr.7 = #i) ∨ (#i < #vr.7))"
    to
      "⊥"
  solved goal nr. 17 (simplified): (#vr.7 = #i)  ∥ (#i < #vr.7)
  simplified formula:
      "((#vr.8 = #i) ∨ (#i < #vr.8))"
    to
      "⊥"
  solved goal nr. 18 (simplified): (#vr.8 = #i)  ∥ (#i < #vr.8)
  solved goal nr. 131 (precomputed): !KU( ~ra_r_key ) @ #vk.21
  simplified formula:
      "((last(#vr.8)) ∨
        (∃ #j. (!KU( index_req.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
    to
      "((∃ #j.
          (!KU( index_req.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
  solved goal nr. 25 (simplified):
     (last(#vr.8))  ∥
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.8))
  solved goal nr. 137 (precomputed): !KU( ~ra_o_key.1 ) @ #vk.26
  solved goal nr. 70 (precomputed): !KU( ~ra_r_key ) @ #vk.21
  solved goal nr. 129 (precomputed): !KU( ~oname ) @ #vk.24
  solved goal nr. 45 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.8
  simplified formula:
      "((last(#vr.8)) ∨
        (∃ #j. (!KU( index_req.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
    to
      "((∃ #j.
          (!KU( index_req.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
  solved goal nr. 26 (simplified):
     (last(#vr.8))  ∥
     (∃ #j. (!KU( index_req.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.7>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.8))
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j.
          (!KU( data_sealed.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.7>,
                                         h(<~platform_sec.11, ~mrsigner.12, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( data_sealed.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.7>,
                                         h(<~platform_sec.11, ~mrsigner.12, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 31 (simplified):
     (last(#vr.9))  ∥
     (∃ #j.
       (!KU( data_sealed.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.7>,
                                      h(<~platform_sec.11, ~mrsigner.12, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  solved goal nr. 144 (precomputed): !KU( ~ra_r_key ) @ #vk.21
  simplified formula:
      "((last(#vr.21)) ∨
        (∃ #j.
          (!KU( index_req.15 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.21)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.15>,
                                            ~ra_r_key.8)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.21)))"
    to
      "((∃ #j.
          (!KU( index_req.15 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.21)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.15>,
                                            ~ra_r_key.8)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.21)))"
  solved goal nr. 30 (simplified):
     (last(#vr.21))  ∥
     (∃ #j.
       (!KU( index_req.15 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.21))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.15>,
                                         ~ra_r_key.8)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.21))
  solved goal nr. 85 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.21
  solved goal nr. 161 (precomputed): !KU( ~ra_r_key ) @ #vk.26
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j.
          (!KU( data_sealed.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.7>,
                                         h(<~platform_sec.11, ~mrsigner.12, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( data_sealed.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.7>,
                                         h(<~platform_sec.11, ~mrsigner.12, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 32 (simplified):
     (last(#vr.9))  ∥
     (∃ #j.
       (!KU( data_sealed.7 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.10, data_sealed.7>,
                                      h(<~platform_sec.11, ~mrsigner.12, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  simplified formula:
      "((last(#vr.21)) ∨
        (∃ #j.
          (!KU( index_req.15 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.21)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.15>,
                                            ~ra_r_key.8)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.21)))"
    to
      "((∃ #j.
          (!KU( index_req.15 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.21)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.15>,
                                            ~ra_r_key.8)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.21)))"
  solved goal nr. 31 (simplified):
     (last(#vr.21))  ∥
     (∃ #j.
       (!KU( index_req.15 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.21))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.15>,
                                         ~ra_r_key.8)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.21))
  solved goal nr. 139 (precomputed): !KU( ~ra_r_key ) @ #vk.23
  solved goal nr. 51 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.17
  solved goal nr. 28 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 30 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.14
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 28 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 30 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.14
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 27 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 26 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.12) ∨ (#j.12 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 28 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 29 (simplified): (#i < #j.12)  ∥ (#j.12 < #i)
  solved goal nr. 28 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.12
  solved goal nr. 27 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.13
  simplified formula:
      "((#i < #j.12) ∨ (#j.12 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 29 (simplified): (#i < #j.12)  ∥ (#j.12 < #i)
  solved goal nr. 28 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 32 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 43 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 42 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 44 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 43 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 29 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 33 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 32 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.14
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 33 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 163 (precomputed): !KU( ~ra_r_key ) @ #vk.26
  solved goal nr. 6 (precomputed):
    EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
             index_req
    ) ▶₁ #i
  solved goal nr. 152 (precomputed): !KU( ~ra_r_key ) @ #vk.23
  solved goal nr. 57 (precomputed):
    !KU( senc(<~oname, ~data.1>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.14
  simplified formula:
      "((last(#vr.3)) ∨
        (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                            ~ra_r_key)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.3)))"
    to
      "((∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                            ~ra_r_key)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.3)))"
  solved goal nr. 17 (simplified):
     (last(#vr.3))  ∥
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.3))
  simplified formula:
      "((last(#vr.3)) ∨
        (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                            ~ra_r_key)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.3)))"
    to
      "((∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                            ~ra_r_key)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.3)))"
  solved goal nr. 18 (simplified):
     (last(#vr.3))  ∥
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.3))
  solved goal nr. 18 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr))
  solved goal nr. 19 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr))
  simplified formula:
      "((#i < #j.8) ∨ (#j.8 < #i))"
    to
      "⊤"
  solved goal nr. 20 (simplified): (#i < #j.8)  ∥ (#j.8 < #i)
  simplified formula:
      "((#i < #j.7) ∨ (#j.7 < #i))"
    to
      "⊤"
  solved goal nr. 21 (simplified): (#i < #j.7)  ∥ (#j.7 < #i)
  solved goal nr. 19 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.8
  solved goal nr. 20 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.7
  simplified formula:
      "((#i < #j.8) ∨ (#j.8 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.7) ∨ (#j.7 < #i))"
    to
      "⊤"
  solved goal nr. 20 (simplified): (#i < #j.8)  ∥ (#j.8 < #i)
  solved goal nr. 21 (simplified): (#i < #j.7)  ∥ (#j.7 < #i)
  solved goal nr. 5 (precomputed):
    !KU( senc(<oname_sealed, x>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.2
  solved goal nr. 5 (precomputed):
    !KU( senc(<oname_sealed, x>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.2
  solved goal nr. 113 (precomputed): !KU( ~ra_r_key ) @ #vk.27
  solved goal nr. 55 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  simplified formula:
      "((#vk.11 = #i) ∨ (#i < #vk.11))"
    to
      "⊥"
  solved goal nr. 28 (simplified): (#vk.11 = #i)  ∥ (#i < #vk.11)
  simplified formula:
      "((#vk.11 = #i) ∨ (#i < #vk.11))"
    to
      "⊥"
  solved goal nr. 26 (simplified): (#vk.11 = #i)  ∥ (#i < #vk.11)
  simplified formula:
      "((#vr.9 = #i) ∨ (#i < #vr.9))"
    to
      "⊥"
  solved goal nr. 32 (simplified): (#vr.9 = #i)  ∥ (#i < #vr.9)
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 33 (simplified):
     (last(#vr.9))  ∥
     (∃ #j.
       (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 34 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  solved goal nr. 165 (precomputed):
    !KU( senc(<'upload', ~oname, ~data.1>, ~ra_o_key.2) ) @ #vk.26
  simplified formula:
      "((#vr.9 = #i) ∨ (#i < #vr.9))"
    to
      "⊥"
  solved goal nr. 30 (simplified): (#vr.9 = #i)  ∥ (#i < #vr.9)
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 31 (simplified):
     (last(#vr.9))  ∥
     (∃ #j.
       (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  solved goal nr. 166 (precomputed): !KU( ~oname ) @ #vk.27
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 32 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 34 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 35 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 32 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 33 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 34 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 35 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 32 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( oname_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.13)) ∨
        (∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                        >,
                                        ~ra_o_key.14)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.13)))"
  solved goal nr. 33 (simplified):
     (last(#vr.13))  ∥
     (∃ #j.
       (!KU( data_rcvd.10 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.9, data_rcvd.10
                                     >,
                                     ~ra_o_key.14)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.13))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 33 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 64 (precomputed):
    !KU( senc(<'RCHR_data_resp', ~data.1>, ~ra_r_key) ) @ #vk.19
  solved goal nr. 174 (precomputed): !KU( ~ra_o_key.2 ) @ #vk.29
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 31 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 115 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.27
  solved goal nr. 34 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 117 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j. (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                            ~ra_r_key.11)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 32 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( index_req.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.9>,
                                         ~ra_r_key.11)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 118 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.28, sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 119 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 39 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 38 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 37 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 36 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  solved goal nr. 118 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.28,
                       sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 119 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 40 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 39 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  simplified formula:
      "((last(#vr.11)) ∨
        (∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
    to
      "((∃ #j.
          (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                         h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.11)))"
  solved goal nr. 38 (simplified):
     (last(#vr.11))  ∥
     (∃ #j.
       (!KU( data_sealed.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.12, data_sealed.9>,
                                      h(<~platform_sec.13, ~mrsigner.14, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((last(#vr.23)) ∨
        (∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
    to
      "((∃ #j.
          (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.23)))"
  solved goal nr. 37 (simplified):
     (last(#vr.23))  ∥
     (∃ #j.
       (!KU( index_req.17 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.23))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.17>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.23))
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 36 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 36 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 10 (directly):
    DB_store( ~p_id, ~ptr, '1', ptrIndex2, ('1'+'1'),
              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store1
  solved goal nr. 167 (precomputed): !KU( ~data.1 ) @ #vk.28
  solved goal nr. 167 (precomputed): !KU( ~data.1 ) @ #vk.28
  solved goal nr. 167 (precomputed): !KU( ~data.1 ) @ #vk.28
  solved goal nr. 32 (directly):
     (∃ #j. (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 34 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 33 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.15
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 34 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 124 (precomputed):
    Start_thread_db_upload( ~p_id ) ▶₁ #db_store1
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.14
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 38 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 41 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 40 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  solved goal nr. 39 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 42 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 41 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 41 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 42 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 49 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 48 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 50 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 49 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 11 (directly):
    DB_store( ~p_id.1, ~ptr_new, ('1'+'1'), ptrIndex3, ('1'+'1'+'1'),
              senc(<~oname, ~data.1>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #db_store2
  solved goal nr. 95 (precomputed):
    !KU( senc(<'upload', oname_sealed, data_rcvd>, ~ra_o_key)
    ) @ #vk.19
  solved goal nr. 134 (precomputed):
    Start_thread_db_upload( ~p_id.1 ) ▶₁ #db_store2
  solved goal nr. 39 (directly):
     (∃ #j.
       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 36 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 53 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 36 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 39 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 39 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 38 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.16
  solved goal nr. 52 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 39 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 53 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 38 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 39 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 12 (directly):
    RCHR_data_req( ~ra_r_key, ('1'+i),
                   senc(<'RCHR_data_req', ('1'+i)>, ~ra_r_key),
                   senc(h(senc(<'RCHR_data_req', ('1'+i)>, ~ra_r_key)), ~ra_r_key)
    ) @ #rchr_data_req_111
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 35 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.15
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 44 (precomputed): !Indexes( x ) ▶₀ #vr.3
  solved goal nr. 36 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.14
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'+'1'))"
    to
      "⊤"
  solved goal nr. 40 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 43 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 42 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 43 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'+x.23))"
    to
      "⊤"
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 51 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 50 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 86 (precomputed): !Indexes( i ) ▶₀ #vr
  solved goal nr. 120 (precomputed): !KU( ~ra_o_key ) @ #vk.22
  solved goal nr. 41 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 44 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 43 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 44 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 52 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 51 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 41 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 55 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 54 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 55 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 121 (precomputed): !Indexes( x ) ▶₀ #vr.22
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 5 (precomputed):
    !KU( senc(<oname_sealed, x>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.2
  solved goal nr. 95 (precomputed):
    !DB_index( ptr.1, ('1'+'1') ) ▶₂ #vr.1
  solved goal nr. 95 (precomputed):
    !DB_index( ptr.1, ('1'+x) ) ▶₂ #vr.1
  solved goal nr. 5 (precomputed):
    !KU( senc(<oname_sealed, x>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.2
  solved goal nr. 42 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#vk.10 = #i) ∨ (#i < #vk.10))"
    to
      "⊥"
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 27 (simplified): (#vk.10 = #i)  ∥ (#i < #vk.10)
  solved goal nr. 55 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((#vk.10 = #i) ∨ (#i < #vk.10))"
    to
      "⊥"
  solved goal nr. 29 (simplified): (#vk.10 = #i)  ∥ (#i < #vk.10)
  simplified formula:
      "((#vr.8 = #i) ∨ (#i < #vr.8))"
    to
      "⊥"
  solved goal nr. 31 (simplified): (#vr.8 = #i)  ∥ (#i < #vr.8)
  simplified formula:
      "((last(#vr.8)) ∨
        (∃ #j. (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
    to
      "((∃ #j.
          (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
  solved goal nr. 32 (simplified):
     (last(#vr.8))  ∥
     (∃ #j.
       (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.8))
  simplified formula:
      "((last(#vr.8)) ∨
        (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
    to
      "((∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
  solved goal nr. 33 (simplified):
     (last(#vr.8))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.8))
  simplified formula:
      "((#vr.8 = #i) ∨ (#i < #vr.8))"
    to
      "⊥"
  solved goal nr. 33 (simplified): (#vr.8 = #i)  ∥ (#i < #vr.8)
  simplified formula:
      "((last(#vr.8)) ∨
        (∃ #j. (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
    to
      "((∃ #j.
          (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
  solved goal nr. 34 (simplified):
     (last(#vr.8))  ∥
     (∃ #j.
       (!KU( oname_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.8))
  solved goal nr. 125 (precomputed):
    !DB_index( ~ptr, '1' ) ▶₂ #db_store1
  simplified formula:
      "((last(#vr.8)) ∨
        (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
    to
      "((∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                        ~ra_o_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.8)))"
  solved goal nr. 35 (simplified):
     (last(#vr.8))  ∥
     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, x>,
                                     ~ra_o_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.8))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 33 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j. (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 34 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  solved goal nr. 135 (precomputed):
    !DB_index( ~ptr_new, ('1'+'1') ) ▶₂ #db_store2
  solved goal nr. 123 (precomputed): !Indexes( x ) ▶₀ #vr.23
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 35 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j. (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 36 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 33 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j. (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 34 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 35 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( oname_rcvd.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  simplified formula:
      "((last(#vr.12)) ∨
        (∃ #j. (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
    to
      "((∃ #j.
          (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                        >,
                                        ~ra_o_key.13)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.12)))"
  solved goal nr. 36 (simplified):
     (last(#vr.12))  ∥
     (∃ #j.
       (!KU( data_rcvd.9 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.8, data_rcvd.9
                                     >,
                                     ~ra_o_key.13)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.12))
  solved goal nr. 146 (precomputed): !Indexes( x ) ▶₀ #vr.5
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 32 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 34 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  solved goal nr. 125 (precomputed): !Indexes( x ) ▶₀ #vr.24
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 33 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  simplified formula:
      "((last(#vr.9)) ∨
        (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
    to
      "((∃ #j.
          (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                            ~ra_r_key.10)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.9)))"
  solved goal nr. 35 (simplified):
     (last(#vr.9))  ∥
     (∃ #j. (!KU( index_req.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.8>,
                                         ~ra_r_key.10)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.9))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 38 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                      h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.22)) ∨
        (∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
    to
      "((∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
  solved goal nr. 37 (simplified):
     (last(#vr.22))  ∥
     (∃ #j.
       (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.22))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 40 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                      h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.22)) ∨
        (∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
    to
      "((∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
  solved goal nr. 39 (simplified):
     (last(#vr.22))  ∥
     (∃ #j.
       (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.22))
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 39 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                      h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.22)) ∨
        (∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
    to
      "((∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
  solved goal nr. 38 (simplified):
     (last(#vr.22))  ∥
     (∃ #j.
       (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.22))
  solved goal nr. 123 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 159 (precomputed):
    !DB_index( ptr.1, ('1'+x) ) ▶₂ #vr.6
  simplified formula:
      "((last(#vr.10)) ∨
        (∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
    to
      "((∃ #j.
          (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                         h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.10)))"
  solved goal nr. 41 (simplified):
     (last(#vr.10))  ∥
     (∃ #j.
       (!KU( data_sealed.8 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.11, data_sealed.8>,
                                      h(<~platform_sec.12, ~mrsigner.13, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((last(#vr.22)) ∨
        (∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
    to
      "((∃ #j.
          (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22)) ∨
        (∃ #j.
          (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                            ~ra_r_key.9)
           ) @ #j)
         ∧
          (¬(last(#j))) ∧ (#j < #vr.22)))"
  solved goal nr. 40 (simplified):
     (last(#vr.22))  ∥
     (∃ #j.
       (!KU( index_req.16 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.22))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.16>,
                                         ~ra_r_key.9)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.22))
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 159 (precomputed):
    !DB_index( ptr.1, ('1'+'1') ) ▶₂ #vr.6
  solved goal nr. 35 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 35 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 38 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 38 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 37 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  solved goal nr. 37 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 38 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 38 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 35 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.13
  solved goal nr. 35 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 36 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.14
  solved goal nr. 39 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 40 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 42 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 173 (precomputed): !Indexes( x ) ▶₀ #vr.10
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 43 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 41 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  solved goal nr. 42 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 43 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 42 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 51 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 50 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 50 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 49 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 36 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 40 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 39 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 40 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 36 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 37 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 38 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 37 (directly):
     (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  solved goal nr. 35 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 40 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 40 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 37 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.13
  simplified formula:
      "((#i < #j.13) ∨ (#j.13 < #i))"
    to
      "⊤"
  solved goal nr. 38 (simplified): (#i < #j.13)  ∥ (#j.13 < #i)
  solved goal nr. 36 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.14
  solved goal nr. 39 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  solved goal nr. 39 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 40 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 40 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 42 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 45 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 44 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  solved goal nr. 41 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 45 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 44 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 53 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 191 (precomputed):
    !DB_index( ptr.1, ('1'+x) ) ▶₂ #vr.11
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 52 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 43 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 44 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( data_sealed ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 52 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( data_sealed ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  simplified formula:
      "((last(#j.17)) ∨
        (∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
    to
      "((∃ #j.18.
          (!KU( oname_sealed.1 ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)) ∨
        (∃ #j.18.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                         data_sealed>,
                                        ~ra_o_key.18)
           ) @ #j.18)
         ∧
          (¬(last(#j.18))) ∧ (#j.18 < #j.17)))"
  solved goal nr. 51 (simplified):
     (last(#j.17))  ∥
     (∃ #j.18.
       (!KU( oname_sealed.1 ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))  ∥
     (∃ #j.18.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key.18)
        ) @ #j.18)
      ∧
       (¬(last(#j.18))) ∧ (#j.18 < #j.17))
  solved goal nr. 191 (precomputed):
    !DB_index( ptr.1, ('1'+'1') ) ▶₂ #vr.11
  solved goal nr. 38 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 42 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 41 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 42 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 195 (precomputed): !Indexes( x ) ▶₀ #vr.15
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 46 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 109 (precomputed): !KU( ~ra_r_key ) @ #vk.28
  solved goal nr. 55 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 136 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 47 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.18
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 49 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 48 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 219 (precomputed):
    !DB_index( ptr.1, ('1'+x) ) ▶₂ #vr.16
  solved goal nr. 219 (precomputed):
    !DB_index( ptr.1, ('1'+'1') ) ▶₂ #vr.16
  solved goal nr. 111 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.28
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  solved goal nr. 113 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 223 (precomputed): !Indexes( x ) ▶₀ #vr.20
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.27, sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  solved goal nr. 47 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.27,
                       sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 45 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 45 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 49 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 254 (precomputed):
    !DB_index( ptr.1, ('1'+'1') ) ▶₂ #vr.21
  solved goal nr. 254 (precomputed):
    !DB_index( ptr.1, ('1'+x) ) ▶₂ #vr.21
  solved goal nr. 253 (precomputed):
    !DB_index( ptr.1, '1' ) ▶₂ #vr.21
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 46 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 218 (precomputed):
    !DB_index( ptr.1, '1' ) ▶₂ #vr.16
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 48 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 109 (precomputed): !KU( ~ra_r_key ) @ #vk.28
  solved goal nr. 31 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1
  solved goal nr. 55 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 47 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 111 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.28
  solved goal nr. 113 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.27, sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  solved goal nr. 224 (precomputed): !KU( ~ra_o_key ) @ #vk.35
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 32 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.2
  solved goal nr. 45 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 45 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 49 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.16
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.27,
                       sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 28 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 29 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 30 (directly):
     (∃ #j.
       (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  solved goal nr. 31 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 30 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 30 (directly):
     (∃ #j.
       (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 30 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.14
  solved goal nr. 29 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.14) ∨ (#j.14 < #i))"
    to
      "⊤"
  solved goal nr. 31 (simplified): (#i < #j.14)  ∥ (#j.14 < #i)
  solved goal nr. 32 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                 ~ra_o_key.1)
    ) @ #j.16
  solved goal nr. 32 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 30 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 33 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 36 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 37 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 45 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 35 (directly):
     (∃ #j. (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 38 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 44 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 37 (directly):
    AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                  h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 38 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( data_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 46 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( data_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  simplified formula:
      "((last(#j.16)) ∨
        (∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
    to
      "((∃ #j.17.
          (!KU( oname_sealed ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)) ∨
        (∃ #j.17.
          (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                        >,
                                        ~ra_o_key.17)
           ) @ #j.17)
         ∧
          (¬(last(#j.17))) ∧ (#j.17 < #j.16)))"
  solved goal nr. 45 (simplified):
     (last(#j.16))  ∥
     (∃ #j.17.
       (!KU( oname_sealed ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))  ∥
     (∃ #j.17.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.17)
        ) @ #j.17)
      ∧
       (¬(last(#j.17))) ∧ (#j.17 < #j.16))
  solved goal nr. 55 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 190 (precomputed):
    !DB_index( ptr.1, '1' ) ▶₂ #vr.11
  solved goal nr. 105 (precomputed): !KU( ~ra_r_key ) @ #vk.29
  solved goal nr. 31 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                     ~ra_o_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 34 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 35 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 31 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1
  solved goal nr. 35 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 48 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 109 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 107 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.29
  solved goal nr. 110 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.28, sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 111 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 110 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.28,
                       sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 111 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 196 (precomputed): !KU( ~ra_o_key ) @ #vk.32
  solved goal nr. 46 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 46 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 32 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.2
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 53 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 52 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 53 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 36 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 49 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 95 (precomputed):
    !KU( h(<~platform_sec, ~mrsigner, 'seal'>) ) @ #vk.19
  solved goal nr. 198 (precomputed): !KU( ~ra_o_key ) @ #vk.32
  solved goal nr. 37 (precomputed):
    !KU( senc(<'upload', ~oname, ~data.1>, ~ra_o_key.1) ) @ #vk.4
  solved goal nr. 114 (precomputed): !KU( ~platform_sec ) @ #vk.23
  solved goal nr. 47 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 47 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key.1)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 54 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 53 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 54 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 200 (precomputed): !KU( ~ra_o_key.1 ) @ #vk.32
  solved goal nr. 38 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data.1>, ~ra_o_key.1)),
              ~ra_o_key.1)
    ) @ #vk.5
  solved goal nr. 28 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.5))
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 32 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 31 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.15
  simplified formula:
      "((#i < #j.15) ∨ (#j.15 < #i))"
    to
      "⊤"
  solved goal nr. 32 (simplified): (#i < #j.15)  ∥ (#j.15 < #i)
  solved goal nr. 26 (precomputed):
    !KU( senc(<oname_sealed.1, data_sealed>,
              h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #vk.13
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 32 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 46 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 45 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 46 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 44 (precomputed):
    !KU( senc(<'RCHR_data_req', ('1'+'1'+'1'+'1')>, ~ra_r_key)
    ) @ #vk.7
  solved goal nr. 125 (precomputed):
    !DB_index( ~ptr, '1' ) ▶₂ #db_store1
  solved goal nr. 43 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 43 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 49 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  solved goal nr. 47 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 135 (precomputed):
    !DB_index( ~ptr_new, ('1'+'1') ) ▶₂ #db_store2
  solved goal nr. 57 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 113 (precomputed): !KU( ~ra_r_key ) @ #vk.27
  solved goal nr. 158 (precomputed): !DB_index( ptr.1, '1' ) ▶₂ #vr.6
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 46 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 31 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 48 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 117 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 118 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.28, sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  solved goal nr. 117 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.27
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 119 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 118 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.28,
                       sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 119 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 32 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.2
  solved goal nr. 174 (precomputed): !KU( ~ra_o_key ) @ #vk.29
  solved goal nr. 33 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 46 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 47 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 176 (precomputed): !KU( ~ra_o_key ) @ #vk.29
  solved goal nr. 37 (precomputed):
    !KU( senc(<'upload', ~oname, ~data.1>, ~ra_o_key.1) ) @ #vk.4
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 50 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  solved goal nr. 44 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 51 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 48 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 49 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 95 (precomputed):
    !KU( senc(<'upload', oname_sealed, data_rcvd>, ~ra_o_key)
    ) @ #vk.19
  solved goal nr. 34 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.10))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 47 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 48 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 38 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data.1>, ~ra_o_key.1)),
              ~ra_o_key.1)
    ) @ #vk.5
  solved goal nr. 120 (precomputed): !KU( ~ra_o_key ) @ #vk.22
  solved goal nr. 178 (precomputed): !KU( ~ra_o_key.1 ) @ #vk.29
  solved goal nr. 42 (precomputed): !Indexes( x ) ▶₀ #vr.1
  simplified formula:
      "¬(('1'+'1'+'1') = ('1'+'1'))"
    to
      "⊤"
  simplified formula:
      "¬(('1'+'1'+x.23) = ('1'+'1'))"
    to
      "⊤"
  solved goal nr. 45 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 45 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed
                                     >,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 49 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 50 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 51 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 52 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 180 (precomputed): !KU( ~ra_o_key.1 ) @ #vk.29
  solved goal nr. 44 (precomputed):
    !KU( senc(<'RCHR_data_req', ('1'+'1'+'1')>, ~ra_r_key) ) @ #vk.7
  solved goal nr. 121 (precomputed): !Indexes( x ) ▶₀ #vr.22
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 35 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 39 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 38 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 39 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 123 (precomputed): !Indexes( x ) ▶₀ #vr.23
  solved goal nr. 50 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 55 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 54 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 55 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 50 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 45 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.8
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 182 (precomputed): !KU( ~ra_r_key ) @ #vk.29
  solved goal nr. 56 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 125 (precomputed): !Indexes( x ) ▶₀ #vr.24
  solved goal nr. 40 (directly):
     (∃ #j.
       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 54 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 53 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 54 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 185 (precomputed): !KU( ~ra_r_key ) @ #vk.29
  solved goal nr. 57 (precomputed):
    !KU( senc(<~oname, ~data.1>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.14
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 123 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 65 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data.1>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.20
  solved goal nr. 51 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 176 (precomputed): !KU( ~ra_r_key ) @ #vk.26
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 55 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 51 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 57 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 138 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 109 (precomputed): !KU( ~ra_r_key ) @ #vk.28
  solved goal nr. 57 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 47 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.18
  solved goal nr. 37 (directly):
     (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                     ~ra_o_key)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.6))
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 41 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 40 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                 ~ra_o_key)
    ) @ #j.16
  simplified formula:
      "((#i < #j.16) ∨ (#j.16 < #i))"
    to
      "⊤"
  solved goal nr. 41 (simplified): (#i < #j.16)  ∥ (#j.16 < #i)
  solved goal nr. 124 (precomputed):
    !KU( senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
    ) @ #vk.24
  solved goal nr. 189 (precomputed): !KU( ~ra_r_key ) @ #vk.26
  solved goal nr. 52 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 52 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 59 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 56 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 58 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 59 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 113 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.27, sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  solved goal nr. 113 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.28
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.27,
                       sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  solved goal nr. 203 (precomputed): !KU( ~oname ) @ #vk.27
  solved goal nr. 53 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 60 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 53 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  solved goal nr. 202 (precomputed):
    !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key.2) ) @ #vk.26
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 59 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 60 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 57 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 40 (directly):
     (∃ #j.
       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 54 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 53 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 54 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 46 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 211 (precomputed): !KU( ~ra_o_key.2 ) @ #vk.29
  simplified formula:
      "¬(('1'+'1') = ('1'+'1'))"
    to
      "⊥"
  solved goal nr. 51 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 55 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 51 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 57 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 109 (precomputed): !KU( ~ra_r_key ) @ #vk.28
  solved goal nr. 57 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 41 (directly):
     (∃ #j.
       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 55 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 54 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 55 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 52 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 52 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 59 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 56 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 58 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 59 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 113 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.27, sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  solved goal nr. 113 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.28
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 114 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.27,
                       sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 115 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 42 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 55 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 56 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 57 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 105 (precomputed): !KU( ~ra_r_key ) @ #vk.29
  solved goal nr. 53 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 60 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 59 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 60 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 53 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 57 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 58 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 43 (directly):
     (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
     (∃ #j.
       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                         ~ra_r_key.1)
        ) @ #j)
      ∧
       (¬(last(#j))) ∧ (#j < #vr.11))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 109 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 109 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.29
  solved goal nr. 110 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.28, sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  solved goal nr. 56 (directly):
    AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                     ~ra_r_key.1)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 57 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 111 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 110 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.28,
                       sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 111 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 54 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 61 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 54 (directly):
     (∃ #j.1.
       (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
     (∃ #j.1.
       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, 
                                      data_sealed>,
                                     ~ra_o_key)
        ) @ #j.1)
      ∧
       (¬(last(#j.1))) ∧ (#j.1 < #j))
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 59 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 60 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 61 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 58 (directly):
    AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed
                                 >,
                                 ~ra_o_key)
    ) @ #j.17
  simplified formula:
      "((#i < #j.17) ∨ (#j.17 < #i))"
    to
      "⊤"
  solved goal nr. 59 (simplified): (#i < #j.17)  ∥ (#j.17 < #i)
  solved goal nr. 95 (precomputed):
    !KU( h(<~platform_sec, ~mrsigner, 'seal'>) ) @ #vk.19
  solved goal nr. 114 (precomputed): !KU( ~platform_sec ) @ #vk.23
  solved goal nr. 26 (precomputed):
    !KU( senc(<oname_sealed.1, data_sealed>,
              h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #vk.13
  solved goal nr. 26 (precomputed):
    !KU( senc(<oname_sealed.1, data_sealed>,
              h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
    ) @ #vk.13
  solved goal nr. 47 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 47 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 118 (precomputed): !KU( ~ra_r_key ) @ #vk.27
  solved goal nr. 58 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 124 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 122 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.27
  solved goal nr. 125 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.28, sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 126 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 125 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.28,
                       sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 126 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 100 (precomputed):
    !KU( senc(<'upload', oname_sealed, data_rcvd>, ~ra_o_key)
    ) @ #vk.19
  solved goal nr. 42 (precomputed): !Indexes( x ) ▶₀ #vr.1
  solved goal nr. 127 (precomputed): !KU( ~ra_o_key ) @ #vk.22
  solved goal nr. 45 (precomputed): !Indexes( x ) ▶₀ #vr.3
  solved goal nr. 45 (precomputed): !Indexes( x.1 ) ▶₀ #vr.3
  simplified formula:
      "¬(('1'+'1'+'1') = ('1'+'1'+'1'))"
    to
      "⊥"
  solved goal nr. 128 (precomputed): !Indexes( x ) ▶₀ #vr.22
  solved goal nr. 128 (precomputed): !Indexes( x ) ▶₀ #vr.22
  simplified formula:
      "¬(('1'+'1'+'1'+'1') = ('1'+'1'+'1'))"
    to
      "⊤"
  simplified formula:
      "¬(('1'+'1'+'1'+x.25) = ('1'+'1'+'1'))"
    to
      "⊤"
  solved goal nr. 130 (precomputed): !Indexes( x.1 ) ▶₀ #vr.23
  solved goal nr. 130 (precomputed): !Indexes( x ) ▶₀ #vr.23
  solved goal nr. 131 (precomputed): !Indexes( x ) ▶₀ #vr.24
  solved goal nr. 129 (precomputed): !Indexes( x ) ▶₀ #vr.23
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  simplified formula:
      "¬(('1'+'1'+'1'+'1') = ('1'+'1'+'1'+'1'))"
    to
      "⊥"
  simplified formula:
      "¬(('1'+'1'+'1') = ('1'+'1'+'1'+'1'))"
    to
      "⊤"
  simplified formula:
      "¬(('1'+'1'+'1') = ('1'+'1'+'1'+x.25))"
    to
      "⊤"
  solved goal nr. 131 (precomputed): !Indexes( x ) ▶₀ #vr.24
  solved goal nr. 58 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 114 (precomputed): !KU( ~ra_r_key ) @ #vk.28
  solved goal nr. 118 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.28
  solved goal nr. 120 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 121 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.27, sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 122 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 121 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.27,
                       sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 122 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 47 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 47 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15
  solved goal nr. 114 (precomputed): !KU( ~ra_r_key ) @ #vk.28
  solved goal nr. 58 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 120 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 118 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.28
  solved goal nr. 121 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.27, sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 122 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 121 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.27,
                       sealed_e_return_t.28
    ) @ #E_r_data_reply_ex_t.29
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 122 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 110 (precomputed): !KU( ~ra_r_key ) @ #vk.29
  solved goal nr. 58 (precomputed):
    !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1) ) @ #vk.18
  solved goal nr. 116 (directly):
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
     (senc(<oname_sealed, data_rcvd>,
           h(<~platform_sec, ~mrsigner, 'seal'>)) =
      senc(<oname_sealed.1, data_sealed>,
           h(<~platform_sec.1, ~mrsigner.1, 'seal'>)))
  solved goal nr. 114 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.29
  solved goal nr. 117 (directly):
    E_r_data_reply_ex( ~ra_r_key, index_req_t.28, sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x < #E_r_data_reply_ex_x) ∨
        (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x))"
    to
      "⊥"
  solved goal nr. 118 (simplified):
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)  ∥
     (#E_r_data_reply_ex_x < #E_r_data_reply_ex_x)
  solved goal nr. 117 (directly):
    E_r_data_reply_ex( ~ra_r_key.1, index_req_t.28,
                       sealed_e_return_t.29
    ) @ #E_r_data_reply_ex_t.30
  simplified formula:
      "((#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1) ∨
        (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1))"
    to
      "⊥"
  solved goal nr. 118 (simplified):
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)  ∥
     (#E_r_data_reply_ex_x.1 < #E_r_data_reply_ex_x.1)
  solved goal nr. 100 (precomputed):
    !KU( h(<~platform_sec, ~mrsigner, 'seal'>) ) @ #vk.19
  solved goal nr. 121 (precomputed): !KU( ~platform_sec ) @ #vk.23
  solved goal nr. 127 (precomputed): !Indexes( x ) ▶₀ #vr.25
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 129 (precomputed): !Indexes( x ) ▶₀ #vr.26
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 131 (precomputed): !Indexes( x ) ▶₀ #vr.27
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 133 (precomputed): !Indexes( x ) ▶₀ #vr.28
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 135 (precomputed): !Indexes( x ) ▶₀ #vr.29
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 137 (precomputed): !Indexes( x ) ▶₀ #vr.30
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 139 (precomputed): !Indexes( x ) ▶₀ #vr.31
  solved goal nr. 141 (precomputed): !Indexes( x ) ▶₀ #vr.32
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 143 (precomputed): !Indexes( x ) ▶₀ #vr.33
  solved goal nr. 145 (precomputed): !Indexes( x ) ▶₀ #vr.34
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 147 (precomputed): !Indexes( x ) ▶₀ #vr.35
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 149 (precomputed): !Indexes( x ) ▶₀ #vr.36
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 151 (precomputed): !Indexes( x ) ▶₀ #vr.37
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 153 (precomputed): !Indexes( x ) ▶₀ #vr.38
  solved goal nr. 155 (precomputed): !Indexes( x ) ▶₀ #vr.39
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 10 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)), ~ra_r_key)
    ) @ #vk.15
  solved goal nr. 157 (precomputed): !Indexes( x ) ▶₀ #vr.40
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 155 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 153 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 47 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.18
  solved goal nr. 166 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 151 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 181 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 56 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', 
                      ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+
                       '1'+'1')
                     >,
                     ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.19
  solved goal nr. 164 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 47 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.18
  solved goal nr. 56 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', 
                      ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+
                       '1')
                     >,
                     ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.19
  solved goal nr. 179 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 181 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 96 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.20
  solved goal nr. 149 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 47 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.18
  solved goal nr. 162 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 56 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', 
                      ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1')>,
                     ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.19
  solved goal nr. 177 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 179 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 96 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.20
  solved goal nr. 182 (precomputed): !KU( ~ra_o_key ) @ #vk.22
  solved goal nr. 17 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.16
  solved goal nr. 147 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 47 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
              ~ra_r_key)
    ) @ #vk.18
  solved goal nr. 160 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 56 (precomputed):
    !KU( senc(h(senc(<'RCHR_data_req', 
                      ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'+'1')>,
                     ~ra_r_key.1)),
              ~ra_r_key.1)
    ) @ #vk.19
  solved goal nr. 175 (precomputed): !KU( ~ra_r_key ) @ #vk.22
  solved goal nr. 177 (precomputed): !KU( ~ra_r_key.1 ) @ #vk.22
  solved goal nr. 96 (precomputed):
    !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)), ~ra_o_key)
    ) @ #vk.20
theory bi begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: fst/1, h/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



restriction MemoryCanBeFreedOnlyOnce:
  "∀ owner pointer pointer_new1 val_old1 val_new1 pointer_new2 val_old2
     val_new2 #i #j.
    ((Free( owner, pointer, pointer_new1, val_old1, val_new1 ) @ #i) ∧
     (Free( owner, pointer, pointer_new2, val_old2, val_new2 ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) DO_setup[color=#145a32]:
   [ Fr( ~oname ) ] --[ DO_Setup( ~oname ) ]-> [ !OMem( ~oname ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DO_upload[color=#c8d6b9]:
   [ Fr( ~data ), Fr( ~ra_o_key ), !OMem( oname ) ]
  --[
  AUTO_OUT_0_1_DO_upload( senc(<'upload', oname, ~data>, ~ra_o_key) ),
  DO_upload( ~ra_o_key, ~data, oname,
             senc(<'upload', oname, ~data>, ~ra_o_key),
             senc(h(senc(<'upload', oname, ~data>, ~ra_o_key)), ~ra_o_key)
  )
  ]->
   [
   Out( <senc(<'upload', oname, ~data>, ~ra_o_key), 
         senc(h(senc(<'upload', oname, ~data>, ~ra_o_key)), ~ra_o_key)>
   ),
   RA_o_login( ~ra_o_key )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) L1_platform[color=#566573]:
   [ Fr( ~platform_sec ) ]
  --[ L1_platform( ~platform_sec ) ]->
   [ !L12( ~platform_sec ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) L2_mrsigner_mrenclave[color=#566573]:
   [ Fr( ~mrsigner ), Fr( ~mrenclave ), !L12( platform_sec ) ]
  --[ L2_mrsigner_mrenclave( platform_sec, ~mrsigner, ~mrenclave ) ]->
   [ !L23( platform_sec, ~mrsigner, ~mrenclave ), Out( ~mrsigner ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) L3_process[color=#566573]:
   [ !L23( platform_sec, mrsigner, mrenclave ), Fr( ~p_id ) ]
  --[ L3_process( platform_sec, mrsigner, mrenclave, ~p_id ) ]->
   [
   Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id ),
   Start_thread_db_upload( ~p_id ),
   Start_thread_e_data_req( platform_sec, mrsigner, mrenclave, ~p_id ),
   Start_thread_db_data_req( ~p_id )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) E_o_decrypt_upload[color=#e5e8e8]:
   [
   In( <senc(<'upload', oname_rcvd, data_rcvd>, ~ra_o_key), 
        senc(h(senc(<'upload', oname_rcvd, data_rcvd>, ~ra_o_key)), ~ra_o_key)>
  solved goal nr. 180 (precomputed): !KU( ~ra_o_key ) @ #vk.22
   ),
   Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id ),
   RA_o_login( ~ra_o_key )
   ]
  --[
  E_o_decrypt_upload( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_o_key,
                      data_rcvd, oname_rcvd,
                      senc(<'upload', oname_rcvd, data_rcvd>, ~ra_o_key),
                      senc(h(senc(<'upload', oname_rcvd, data_rcvd>, ~ra_o_key)), ~ra_o_key),
                      senc(<oname_rcvd, data_rcvd>, h(<platform_sec, mrsigner, 'seal'>))
  ),
  AUTO_IN_2_1_E_o_decrypt( senc(<'upload', oname_rcvd, data_rcvd>,
                                ~ra_o_key),
                           data_rcvd
  ),
  AUTO_IN_1_1_E_o_decrypt( senc(<'upload', oname_rcvd, data_rcvd>,
                                ~ra_o_key),
                           oname_rcvd
  ),
  AUTO_OUT_0_1_E_o_upload( senc(<oname_rcvd, data_rcvd>,
                                h(<platform_sec, mrsigner, 'seal'>))
  )
  ]->
   [
   Out( <'db_store', 
         senc(<oname_rcvd, data_rcvd>, h(<platform_sec, mrsigner, 'seal'>))>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) DB_setup[color=#df9881]:
   [ Fr( ~ptr ) ] --[ DB_setup( ~ptr, '1' ) ]-> [ !DB_index( ~ptr, '1' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DB_store[color=#f7e6c5]:
   [
   Fr( ~ptr_new ), Start_thread_db_upload( ~p_id ), !DB_index( ptr, i ),
   In( <'db_store', sealed_cipher> )
   ]
  --[
  Free( ~p_id, ptr, ~ptr_new, i, ('1'+i) ),
  DB_store( ~p_id, ptr, i, ~ptr_new, ('1'+i), sealed_cipher ),
  Stored_sealing( ('1'+i), sealed_cipher )
  ]->
   [ !DB_mem( ('1'+i), sealed_cipher ), !DB_index( ~ptr_new, ('1'+i) ) ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) Start[color=#ecec57]:
   [ Fr( ~na ) ] --[ Start( ) ]-> [ !Indexes( ('1'+'1') ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Loop[color=#ecec57]:
   [ !Indexes( x ) ] --[ Loop( ) ]-> [ !Indexes( ('1'+x) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) RCHR_data_req[color=#d2b4de]:
   [ !Indexes( index_req ), Fr( ~ra_r_key ) ]
  --[
  RCHR_data_req( ~ra_r_key, index_req,
                 senc(<'RCHR_data_req', index_req>, ~ra_r_key),
                 senc(h(senc(<'RCHR_data_req', index_req>, ~ra_r_key)), ~ra_r_key)
  ),
  RCHR_data_req( ~ra_r_key, index_req,
                 senc(<'RCHR_data_req', index_req>, ~ra_r_key),
                 senc(h(senc(<'RCHR_data_req', index_req>, ~ra_r_key)), ~ra_r_key)
  ),
  AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>, ~ra_r_key)
  )
  ]->
   [
   Out( <senc(<'RCHR_data_req', index_req>, ~ra_r_key), 
         senc(h(senc(<'RCHR_data_req', index_req>, ~ra_r_key)), ~ra_r_key)>
   ),
   RA_r_login( ~ra_r_key ), Mem_RCHR( ~ra_r_key, index_req )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) E_r_data_req[color=#b2babb]:
   [
   In( <senc(<'RCHR_data_req', index_req>, ~ra_r_key), 
        senc(h(senc(<'RCHR_data_req', index_req>, ~ra_r_key)), ~ra_r_key)>
   ),
   RA_r_login( ~ra_r_key ),
   Start_thread_e_data_req( platform_sec, mrsigner, mrenclave, ~p_id )
   ]
  --[
  E_r_data_req( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                index_req, senc(<'RCHR_data_req', index_req>, ~ra_r_key),
                senc(h(senc(<'RCHR_data_req', index_req>, ~ra_r_key)), ~ra_r_key)
  ),
  AUTO_IN_3_1_E_r_data_req( senc(<'RCHR_data_req', index_req>, ~ra_r_key),
                            index_req
  )
  ]->
   [
   Out( <'db_retrieve_req', index_req> ),
   EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key, index_req )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) DB_retrieve[color=#f7e6c5]:
   [
   In( <'db_retrieve', index_req> ), !DB_mem( index_req, sealed_cipher ),
   Start_thread_db_data_req( ~p_id )
   ]
  --[ DB_retrieve( ~p_id, index_req, sealed_cipher ) ]->
   [ Out( <'db_retrieve_resp', sealed_cipher> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) E_r_data_resp[color=#b2babb]:
   [
   In( <'db_retrieve_resp', 
        senc(<oname_sealed, data_sealed>, h(<platform_sec, mrsigner, 'seal'>))>
   ),
   EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key, index_req )
   ]
  --[
  E_r_data_resp( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                 index_req, data_sealed,
                 senc(<oname_sealed, data_sealed>, h(<platform_sec, mrsigner, 'seal'>)),
                 senc(<'RCHR_data_resp', data_sealed>, ~ra_r_key),
                 senc(h(senc(<'RCHR_data_resp', data_sealed>, ~ra_r_key)), ~ra_r_key)
  ),
  E_r_data_reply( ~ra_r_key, index_req ),
  E_r_data_reply_ex( ~ra_r_key, index_req,
                     senc(<oname_sealed, data_sealed>, h(<platform_sec, mrsigner, 'seal'>))
  ),
  AUTO_IN_5_1_E_r_data_resp( senc(<oname_sealed, data_sealed>,
                                  h(<platform_sec, mrsigner, 'seal'>)),
                             data_sealed
  )
  ]->
   [
   Out( <'RCHR_data_resp', 
         senc(<'RCHR_data_resp', data_sealed>, ~ra_r_key), 
         senc(h(senc(<'RCHR_data_resp', data_sealed>, ~ra_r_key)), ~ra_r_key)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RCHR_data_resp[color=#d2b4de]:
   [
   Mem_RCHR( ~ra_r_key, index_req ),
   In( <'RCHR_data_resp', senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key), 
        senc(h(senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key)), ~ra_r_key)>
   )
   ]
  --[
  RCHR_data_resp( ~ra_r_key, index_req, data_rcvd,
                  senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key),
                  senc(h(senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key)), ~ra_r_key)
  ),
  RCHR_data_rcv( ~ra_r_key, index_req )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma AUTO_typing_src [sources]:
  all-traces
  "((((⊤) ∧
      (∀ x m #i.
        (AUTO_IN_1_1_E_o_decrypt( m, x ) @ #i) ⇒
        ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
         (∃ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ∧ (#j < #i))))) ∧
     (∀ x m #i.
       (AUTO_IN_2_1_E_o_decrypt( m, x ) @ #i) ⇒
       ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
        (∃ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ∧ (#j < #i))))) ∧
    (∀ x m #i.
      (AUTO_IN_3_1_E_r_data_req( m, x ) @ #i) ⇒
      ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (AUTO_OUT_0_1_RCHR_data_req( m ) @ #j) ∧ (#j < #i))))) ∧
   (∀ x m #i.
     (AUTO_IN_5_1_E_r_data_resp( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (AUTO_OUT_0_1_E_o_upload( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_1_1_E_o_decrypt( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_2_1_E_o_decrypt( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_3_1_E_r_data_req( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_0_1_RCHR_data_req( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_5_1_E_r_data_resp( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (AUTO_OUT_0_1_E_o_upload( m ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ x m #i.
           (AUTO_IN_1_1_E_o_decrypt( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_2_1_E_o_decrypt( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_0_1_DO_upload( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_3_1_E_r_data_req( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_0_1_RCHR_data_req( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_5_1_E_r_data_resp( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (AUTO_OUT_0_1_E_o_upload( m ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_0_1_DO_upload( senc(<'upload', x, data_rcvd>, ~ra_o_key)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id
             ) ▶₁ #i )
        case L3_process
        solve( RA_o_login( ~ra_o_key ) ▶₂ #i )
          case DO_upload
          solve( !KU( senc(<'upload', x, data_rcvd>, ~ra_o_key) ) @ #vk.1 )
            case DO_upload
            by contradiction /* from formulas */
          next
            case E_o_decrypt_upload_case_1
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                                   ~ra_o_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                                   ~ra_o_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              solve( (∃ #j.
                       (!KU( data_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd.1>,
                                                     ~ra_o_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id
             ) ▶₁ #i )
        case L3_process
        solve( RA_o_login( ~ra_o_key ) ▶₂ #i )
          case DO_upload
          solve( !KU( senc(<'upload', oname_rcvd, x>, ~ra_o_key) ) @ #vk.1 )
            case DO_upload
            by contradiction /* from formulas */
          next
            case E_o_decrypt_upload_case_1
            solve( (∃ #j.
                     (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                                   ~ra_o_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j.
                     (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                                   ~ra_o_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                                     ~ra_o_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key.1)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      solve( (last(#i))  ∥
             (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
             (∃ #j.
               (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, x>, ~ra_o_key)
                ) @ #j)
              ∧
               (¬(last(#j))) ∧ (#j < #i)) )
        case case_1
        solve( Start_thread_e_upload( platform_sec, mrsigner, mrenclave, ~p_id
               ) ▶₁ #i )
          case L3_process
          solve( RA_o_login( ~ra_o_key ) ▶₂ #i )
            case DO_upload
            solve( !KU( senc(<'upload', oname_rcvd, x>, ~ra_o_key) ) @ #vk.1 )
              case DO_upload
              by contradiction /* from formulas */
            next
              case E_o_decrypt_upload_case_1
              solve( (∃ #j.
                       (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                                     ~ra_o_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case E_o_decrypt_upload_case_2
              solve( (∃ #j.
                       (!KU( oname_rcvd.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                                     ~ra_o_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                       (∃ #j.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd.1, data_rcvd>,
                                                       ~ra_o_key.1)
                          ) @ #j)
                        ∧
                         (¬(last(#j))) ∧ (#j < #vr.5)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case E_r_data_req_case_1
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* forbidden KD-fact */
              qed
            next
              case E_r_data_req_case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.6, 0) ~~> (#vk, 0) )
                  case d_union
                  by contradiction /* forbidden KD-fact */
                qed
              qed
            next
              case E_r_data_resp_case_1
              solve( (∃ #j.
                       (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                       (∃ #j.
                         (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                           ~ra_r_key)
                          ) @ #j)
                        ∧
                         (¬(last(#j))) ∧ (#j < #vr.10)) )
                  case case_1
                  solve( (∃ #j.1.
                           (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                         (∃ #j.1.
                           (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                         ~ra_o_key.1)
                            ) @ #j.1)
                          ∧
                           (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #j.1.
                           (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                         (∃ #j.1.
                           (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                         ~ra_o_key.1)
                            ) @ #j.1)
                          ∧
                           (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case E_r_data_resp_case_2
              solve( (∃ #j.
                       (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                      h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                       (∃ #j.
                         (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                           ~ra_r_key)
                          ) @ #j)
                        ∧
                         (¬(last(#j))) ∧ (#j < #vr.10)) )
                  case case_1
                  solve( (∃ #j.1.
                           (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                         (∃ #j.1.
                           (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                         ~ra_o_key.1)
                            ) @ #j.1)
                          ∧
                           (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #j.1.
                           (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                         (∃ #j.1.
                           (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                         ~ra_o_key.1)
                            ) @ #j.1)
                          ∧
                           (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case c_senc
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', x>, ~ra_r_key)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( RA_r_login( ~ra_r_key ) ▶₁ #i )
        case RCHR_data_req_case_1
        solve( Start_thread_e_data_req( platform_sec, mrsigner, mrenclave, ~p_id
               ) ▶₂ #i )
          case L3_process
          solve( !KU( senc(<'RCHR_data_req', x>, ~ra_r_key) ) @ #vk.1 )
            case E_o_decrypt_upload_case_1
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                     ~ra_o_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case RCHR_data_req
            by contradiction /* from formulas */
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      next
        case RCHR_data_req_case_2
        solve( Start_thread_e_data_req( platform_sec, mrsigner, mrenclave, ~p_id
               ) ▶₂ #i )
          case L3_process
          solve( !KU( senc(<'RCHR_data_req', x>, ~ra_r_key) ) @ #vk.1 )
            case E_o_decrypt_upload_case_1
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                     ~ra_o_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.10))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.10)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case RCHR_data_req
            by contradiction /* from formulas */
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_4
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed, x>,
                                            h(<platform_sec, mrsigner, 'seal'>))
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                      index_req
             ) ▶₁ #i )
        case E_r_data_req_case_1
        solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
               (∃ #j.
                 (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                   ~ra_r_key)
                  ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #vr)) )
          case case_1
          solve( !KU( senc(<oname_sealed, x>,
                           h(<~platform_sec, ~mrsigner, 'seal'>))
                 ) @ #vk.2 )
            case E_o_decrypt_upload_case_1
            by contradiction /* from formulas */
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_3
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                     ~ra_o_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.6)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j.
                     (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j.
                     (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.7, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j.
                       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j.
                       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( !KU( senc(<oname_sealed, x>,
                           h(<~platform_sec, ~mrsigner, 'seal'>))
                 ) @ #vk.2 )
            case E_o_decrypt_upload_case_1
            by contradiction /* from formulas */
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_3
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                     ~ra_o_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.6)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.7, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      next
        case E_r_data_req_case_2
        solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
               (∃ #j.
                 (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                   ~ra_r_key)
                  ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #vr)) )
          case case_1
          solve( !KU( senc(<oname_sealed, x>,
                           h(<~platform_sec, ~mrsigner, 'seal'>))
                 ) @ #vk.2 )
            case E_o_decrypt_upload_case_1
            by contradiction /* from formulas */
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_3
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                     ~ra_o_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.6)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j.
                     (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j.
                     (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.7, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j.
                       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j.
                       (!KU( index_req.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req.1>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( !KU( senc(<oname_sealed, x>,
                           h(<~platform_sec, ~mrsigner, 'seal'>))
                 ) @ #vk.2 )
            case E_o_decrypt_upload_case_1
            by contradiction /* from formulas */
          next
            case E_o_decrypt_upload_case_2
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_o_decrypt_upload_case_3
            solve( (∃ #j. (!KU( oname_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                   ~ra_o_key)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              solve( (∃ #j. (!KU( data_rcvd ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_rcvd, data_rcvd>,
                                                     ~ra_o_key)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.6)) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case E_r_data_req_case_1
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case E_r_data_req_case_2
            solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                       ~ra_r_key.1)
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (#vr.7, 0) ~~> (#vk, 0) )
                case d_union
                by contradiction /* forbidden KD-fact */
              qed
            qed
          next
            case E_r_data_resp_case_1
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case E_r_data_resp_case_2
            solve( (∃ #j.
                     (!KU( data_sealed ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                   (∃ #j.
                     (AUTO_OUT_0_1_E_o_upload( senc(<oname_sealed.1, data_sealed>,
                                                    h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.6)) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              solve( (∃ #j. (!KU( index_req ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                     (∃ #j.
                       (AUTO_OUT_0_1_RCHR_data_req( senc(<'RCHR_data_req', index_req>,
                                                         ~ra_r_key.1)
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #vr.11)) )
                case case_1
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #j.1.
                         (!KU( data_sealed ) @ #j.1) ∧ (¬(last(#j.1))) ∧ (#j.1 < #j))  ∥
                       (∃ #j.1.
                         (AUTO_OUT_0_1_DO_upload( senc(<'upload', oname_sealed.1, data_sealed>,
                                                       ~ra_o_key)
                          ) @ #j.1)
                        ∧
                         (¬(last(#j.1))) ∧ (#j.1 < #j)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_senc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma honest_run_req11:
  exists-trace
  "∃ oname #do_setup ra_o_key data cipher_upload_req gcm_tag_upload_req
     #do_upload platform #L1_platform mrenclave mrsigner
     #L2_mrsigner_mrenclave p_id #L3_process sealed_e_return
     #E_o_decrypt_upload index_init ptrIndex1 #db_setup ptrIndex2 #db_store
     ra_r_key index_req cipher_data_req gcm_tag_data_req #rchr_data_req_11
     #E_r_data_req #db_retrieve cipher_data_resp gcm_tag_data_resp
     #E_r_data_resp #rchr_data_resp.
    (((((((((((((DO_Setup( oname ) @ #do_setup) ∧
                (DO_upload( ra_o_key, data, oname, cipher_upload_req, gcm_tag_upload_req
                 ) @ #do_upload)) ∧
               (L1_platform( platform ) @ #L1_platform)) ∧
              (L2_mrsigner_mrenclave( platform, mrsigner, mrenclave
               ) @ #L2_mrsigner_mrenclave)) ∧
             (L3_process( platform, mrsigner, mrenclave, p_id ) @ #L3_process)) ∧
            (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id, ra_o_key, data,
                                 oname, cipher_upload_req, gcm_tag_upload_req, sealed_e_return
             ) @ #E_o_decrypt_upload)) ∧
           (DB_setup( ptrIndex1, index_init ) @ #db_setup)) ∧
          (index_init = '1')) ∧
         (DB_store( p_id, ptrIndex1, index_init, ptrIndex2, ('1'+index_init),
                    sealed_e_return
          ) @ #db_store)) ∧
        (RCHR_data_req( ra_r_key, index_req, cipher_data_req, gcm_tag_data_req
         ) @ #rchr_data_req_11)) ∧
       (E_r_data_req( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                      cipher_data_req, gcm_tag_data_req
        ) @ #E_r_data_req)) ∧
      (DB_retrieve( p_id, index_req, sealed_e_return ) @ #db_retrieve)) ∧
     (E_r_data_resp( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                     data, sealed_e_return, cipher_data_resp, gcm_tag_data_resp
      ) @ #E_r_data_resp)) ∧
    (RCHR_data_resp( ra_r_key, index_req, data, cipher_data_resp,
                     gcm_tag_data_resp
     ) @ #rchr_data_resp)"
/*
guarded formula characterizing all satisfying traces:
"∃ oname #do_setup ra_o_key data cipher_upload_req gcm_tag_upload_req
   #do_upload platform #L1_platform mrenclave mrsigner
   #L2_mrsigner_mrenclave p_id #L3_process sealed_e_return
   #E_o_decrypt_upload index_init ptrIndex1 #db_setup ptrIndex2 #db_store
   ra_r_key index_req cipher_data_req gcm_tag_data_req #rchr_data_req_11
   #E_r_data_req #db_retrieve cipher_data_resp gcm_tag_data_resp
   #E_r_data_resp #rchr_data_resp.
  (DO_Setup( oname ) @ #do_setup) ∧
  (DO_upload( ra_o_key, data, oname, cipher_upload_req, gcm_tag_upload_req
   ) @ #do_upload) ∧
  (L1_platform( platform ) @ #L1_platform) ∧
  (L2_mrsigner_mrenclave( platform, mrsigner, mrenclave
   ) @ #L2_mrsigner_mrenclave) ∧
  (L3_process( platform, mrsigner, mrenclave, p_id ) @ #L3_process) ∧
  (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id, ra_o_key, data,
                       oname, cipher_upload_req, gcm_tag_upload_req, sealed_e_return
   ) @ #E_o_decrypt_upload) ∧
  (DB_setup( ptrIndex1, index_init ) @ #db_setup) ∧
  (index_init = '1') ∧
  (DB_store( p_id, ptrIndex1, index_init, ptrIndex2, ('1'+index_init),
             sealed_e_return
   ) @ #db_store) ∧
  (RCHR_data_req( ra_r_key, index_req, cipher_data_req, gcm_tag_data_req
   ) @ #rchr_data_req_11) ∧
  (E_r_data_req( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                 cipher_data_req, gcm_tag_data_req
   ) @ #E_r_data_req) ∧
  (DB_retrieve( p_id, index_req, sealed_e_return ) @ #db_retrieve) ∧
  (E_r_data_resp( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                  data, sealed_e_return, cipher_data_resp, gcm_tag_data_resp
   ) @ #E_r_data_resp) ∧
  (RCHR_data_resp( ra_r_key, index_req, data, cipher_data_resp,
                   gcm_tag_data_resp
   ) @ #rchr_data_resp)"
*/
simplify
solve( !OMem( ~oname ) ▶₂ #do_upload )
  case DO_setup
  solve( !L12( ~platform_sec ) ▶₂ #L2_mrsigner_mrenclave )
    case L1_platform
    solve( !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process )
      case L2_mrsigner_mrenclave
      solve( Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id
             ) ▶₁ #E_o_decrypt_upload )
        case L3_process
        solve( RA_o_login( ~ra_o_key ) ▶₂ #E_o_decrypt_upload )
          case DO_upload
          solve( RA_r_login( ~ra_r_key ) ▶₁ #E_r_data_req )
            case RCHR_data_req_case_1
            solve( Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                                            ~p_id
                   ) ▶₂ #E_r_data_req )
              case L3_process
              solve( !DB_mem( index_req,
                              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
                     ) ▶₁ #db_retrieve )
                case DB_store
                solve( Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve )
                  case L3_process
                  solve( EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
                                  ('1'+i)
                         ) ▶₁ #E_r_data_resp )
                    case E_r_data_req
                    solve( Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp )
                      case RCHR_data_req
                      solve( DB_store( ~p_id, ~ptr, '1', ptrIndex2, ('1'+'1'),
                                       senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
                             ) @ #db_store )
                        case DB_store
                        solve( Start_thread_db_upload( ~p_id ) ▶₁ #db_store )
                          case L3_process
                          solve( RCHR_data_req( ~ra_r_key, ('1'+'1'),
                                                senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key),
                                                senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
                                                     ~ra_r_key)
                                 ) @ #rchr_data_req_11 )
                            case RCHR_data_req
                            solve( !DB_index( ptr.1, '1' ) ▶₂ #vr.1 )
                              case DB_setup
                              solve( !DB_index( ~ptr, '1' ) ▶₂ #db_store )
                                case DB_setup
                                solve( !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1 )
                                  case DO_upload
                                  solve( !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)),
                                                   ~ra_o_key)
                                         ) @ #vk.2 )
                                    case DO_upload
                                    solve( !KU( senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key) ) @ #vk.4 )
                                      case RCHR_data_req
                                      solve( !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
                                                       ~ra_r_key)
                                             ) @ #vk.5 )
                                        case RCHR_data_req
                                        solve( !KU( senc(<~oname, ~data>,
                                                         h(<~platform_sec, ~mrsigner, 'seal'>))
                                               ) @ #vk.11 )
                                          case E_o_decrypt_upload
                                          solve( !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key.1)
                                                 ) @ #vk.21 )
                                            case DO_upload
                                            solve( !KU( senc(<'RCHR_data_resp', ~data>, ~ra_r_key)
                                                   ) @ #vk.16 )
                                              case E_r_data_resp
                                              solve( !KU( senc(h(senc(<'RCHR_data_resp', ~data>, ~ra_r_key)),
                                                               ~ra_r_key)
                                                     ) @ #vk.17 )
                                                case E_r_data_resp
                                                SOLVED // trace found
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma honest_run_req111:
  exists-trace
  "∃ oname #do_setup ra_o_key data cipher_upload_req gcm_tag_upload_req
     #do_upload platform #L1_platform mrenclave mrsigner
     #L2_mrsigner_mrenclave p_id #L3_process sealed_e_return
     #E_o_decrypt_upload index_init ptrIndex1 ptrIndex2 #db_setup ptrIndex3
     #db_store ra_r_key index_req cipher_data_req gcm_tag_data_req
     #rchr_data_req_11 #E_r_data_req #db_retrieve cipher_data_resp
     gcm_tag_data_resp #E_r_data_resp #rchr_data_resp.
    (((((((((((((DO_Setup( oname ) @ #do_setup) ∧
                (DO_upload( ra_o_key, data, oname, cipher_upload_req, gcm_tag_upload_req
                 ) @ #do_upload)) ∧
               (L1_platform( platform ) @ #L1_platform)) ∧
              (L2_mrsigner_mrenclave( platform, mrsigner, mrenclave
               ) @ #L2_mrsigner_mrenclave)) ∧
             (L3_process( platform, mrsigner, mrenclave, p_id ) @ #L3_process)) ∧
            (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id, ra_o_key, data,
                                 oname, cipher_upload_req, gcm_tag_upload_req, sealed_e_return
             ) @ #E_o_decrypt_upload)) ∧
           (DB_setup( ptrIndex1, index_init ) @ #db_setup)) ∧
          (index_init = '1')) ∧
         (DB_store( p_id, ptrIndex2, ('1'+index_init), ptrIndex3,
                    ('1'+'1'+index_init), sealed_e_return
          ) @ #db_store)) ∧
        (RCHR_data_req( ra_r_key, index_req, cipher_data_req, gcm_tag_data_req
         ) @ #rchr_data_req_11)) ∧
       (E_r_data_req( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                      cipher_data_req, gcm_tag_data_req
        ) @ #E_r_data_req)) ∧
      (DB_retrieve( p_id, index_req, sealed_e_return ) @ #db_retrieve)) ∧
     (E_r_data_resp( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                     data, sealed_e_return, cipher_data_resp, gcm_tag_data_resp
      ) @ #E_r_data_resp)) ∧
    (RCHR_data_resp( ra_r_key, index_req, data, cipher_data_resp,
                     gcm_tag_data_resp
     ) @ #rchr_data_resp)"
/*
guarded formula characterizing all satisfying traces:
"∃ oname #do_setup ra_o_key data cipher_upload_req gcm_tag_upload_req
   #do_upload platform #L1_platform mrenclave mrsigner
   #L2_mrsigner_mrenclave p_id #L3_process sealed_e_return
   #E_o_decrypt_upload index_init ptrIndex1 ptrIndex2 #db_setup ptrIndex3
   #db_store ra_r_key index_req cipher_data_req gcm_tag_data_req
   #rchr_data_req_11 #E_r_data_req #db_retrieve cipher_data_resp
   gcm_tag_data_resp #E_r_data_resp #rchr_data_resp.
  (DO_Setup( oname ) @ #do_setup) ∧
  (DO_upload( ra_o_key, data, oname, cipher_upload_req, gcm_tag_upload_req
   ) @ #do_upload) ∧
  (L1_platform( platform ) @ #L1_platform) ∧
  (L2_mrsigner_mrenclave( platform, mrsigner, mrenclave
   ) @ #L2_mrsigner_mrenclave) ∧
  (L3_process( platform, mrsigner, mrenclave, p_id ) @ #L3_process) ∧
  (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id, ra_o_key, data,
                       oname, cipher_upload_req, gcm_tag_upload_req, sealed_e_return
   ) @ #E_o_decrypt_upload) ∧
  (DB_setup( ptrIndex1, index_init ) @ #db_setup) ∧
  (index_init = '1') ∧
  (DB_store( p_id, ptrIndex2, ('1'+index_init), ptrIndex3,
             ('1'+'1'+index_init), sealed_e_return
   ) @ #db_store) ∧
  (RCHR_data_req( ra_r_key, index_req, cipher_data_req, gcm_tag_data_req
   ) @ #rchr_data_req_11) ∧
  (E_r_data_req( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                 cipher_data_req, gcm_tag_data_req
   ) @ #E_r_data_req) ∧
  (DB_retrieve( p_id, index_req, sealed_e_return ) @ #db_retrieve) ∧
  (E_r_data_resp( platform, mrsigner, mrenclave, p_id, ra_r_key, index_req,
                  data, sealed_e_return, cipher_data_resp, gcm_tag_data_resp
   ) @ #E_r_data_resp) ∧
  (RCHR_data_resp( ra_r_key, index_req, data, cipher_data_resp,
                   gcm_tag_data_resp
   ) @ #rchr_data_resp)"
*/
simplify
solve( !OMem( ~oname ) ▶₂ #do_upload )
  case DO_setup
  solve( !L12( ~platform_sec ) ▶₂ #L2_mrsigner_mrenclave )
    case L1_platform
    solve( !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process )
      case L2_mrsigner_mrenclave
      solve( Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id
             ) ▶₁ #E_o_decrypt_upload )
        case L3_process
        solve( RA_o_login( ~ra_o_key ) ▶₂ #E_o_decrypt_upload )
          case DO_upload
          solve( RA_r_login( ~ra_r_key ) ▶₁ #E_r_data_req )
            case RCHR_data_req_case_1
            solve( Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                                            ~p_id
                   ) ▶₂ #E_r_data_req )
              case L3_process
              solve( !DB_mem( index_req,
                              senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
                     ) ▶₁ #db_retrieve )
                case DB_store
                solve( Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve )
                  case L3_process
                  solve( EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
                                  ('1'+i)
                         ) ▶₁ #E_r_data_resp )
                    case E_r_data_req
                    solve( Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp )
                      case RCHR_data_req
                      solve( DB_store( ~p_id, ptrIndex2, ('1'+'1'), ptrIndex3, ('1'+'1'+'1'),
                                       senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
                             ) @ #db_store )
                        case DB_store
                        solve( Start_thread_db_upload( ~p_id ) ▶₁ #db_store )
                          case L3_process
                          solve( RCHR_data_req( ~ra_r_key, ('1'+'1'),
                                                senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key),
                                                senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
                                                     ~ra_r_key)
                                 ) @ #rchr_data_req_11 )
                            case RCHR_data_req
                            solve( !DB_index( ptr.1, '1' ) ▶₂ #vr.1 )
                              case DB_setup
                              solve( !DB_index( ptrIndex2, ('1'+'1') ) ▶₂ #db_store )
                                case DB_store
                                solve( !DB_index( ptr.2, '1' ) ▶₂ #vr.6 )
                                  case DB_setup
                                  solve( !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key) ) @ #vk.1 )
                                    case DO_upload
                                    solve( !KU( senc(h(senc(<'upload', ~oname, ~data>, ~ra_o_key)),
                                                     ~ra_o_key)
                                           ) @ #vk.2 )
                                      case DO_upload
                                      solve( !KU( senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key) ) @ #vk.4 )
                                        case RCHR_data_req
                                        solve( !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key)),
                                                         ~ra_r_key)
                                               ) @ #vk.5 )
                                          case RCHR_data_req
                                          solve( !KU( senc(<~oname, ~data>,
                                                           h(<~platform_sec, ~mrsigner, 'seal'>))
                                                 ) @ #vk.11 )
                                            case E_o_decrypt_upload
                                            solve( !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key.1)
                                                   ) @ #vk.23 )
                                              case DO_upload
                                              solve( !KU( senc(<'RCHR_data_resp', ~data>, ~ra_r_key)
                                                     ) @ #vk.16 )
                                                case E_r_data_resp
                                                solve( !KU( senc(h(senc(<'RCHR_data_resp', ~data>,
                                                                        ~ra_r_key)),
                                                                 ~ra_r_key)
                                                       ) @ #vk.17 )
                                                  case E_r_data_resp
                                                  SOLVED // trace found
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma honest_run_2_upload:
  exists-trace
  "∃ oname #do_setup ra_o_key1 data1 cipher_upload_req1 gcm_tag_upload_req1
     sealed_e_return1 #do_upload1 ra_o_key2 data2 cipher_upload_req2
     gcm_tag_upload_req2 sealed_e_return2 #do_upload2 platform #L1_platform
     mrenclave mrsigner #L2_mrsigner_mrenclave p_id1 p_id2 #L3_process1
     #L3_process2 #E_o_decrypt_upload1 #E_o_decrypt_upload2 index_init
     ptrIndex1 ptrIndex2 #db_setup ptrIndex3 #db_store1 #db_store2 ra_r_key
     index_req cipher_data_req gcm_tag_data_req #rchr_data_req_111
     #E_r_data_req #db_retrieve cipher_data_resp gcm_tag_data_resp
     #E_r_data_resp #rchr_data_resp.
    (((((((((((((((((DO_Setup( oname ) @ #do_setup) ∧
                    (DO_upload( ra_o_key1, data1, oname, cipher_upload_req1,
                                gcm_tag_upload_req1
                     ) @ #do_upload1)) ∧
                   (DO_upload( ra_o_key2, data2, oname, cipher_upload_req2,
                               gcm_tag_upload_req2
                    ) @ #do_upload2)) ∧
                  (L1_platform( platform ) @ #L1_platform)) ∧
                 (L2_mrsigner_mrenclave( platform, mrsigner, mrenclave
                  ) @ #L2_mrsigner_mrenclave)) ∧
                (L3_process( platform, mrsigner, mrenclave, p_id1 ) @ #L3_process1)) ∧
               (L3_process( platform, mrsigner, mrenclave, p_id2 ) @ #L3_process2)) ∧
              (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id1, ra_o_key1,
                                   data1, oname, cipher_upload_req1, gcm_tag_upload_req1, sealed_e_return1
               ) @ #E_o_decrypt_upload1)) ∧
             (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id2, ra_o_key2,
                                  data2, oname, cipher_upload_req2, gcm_tag_upload_req2, sealed_e_return2
              ) @ #E_o_decrypt_upload2)) ∧
            (DB_setup( ptrIndex1, index_init ) @ #db_setup)) ∧
           (index_init = '1')) ∧
          (DB_store( p_id1, ptrIndex1, index_init, ptrIndex2, ('1'+index_init),
                     sealed_e_return1
           ) @ #db_store1)) ∧
         (DB_store( p_id2, ptrIndex2, ('1'+index_init), ptrIndex3,
                    ('1'+'1'+index_init), sealed_e_return2
          ) @ #db_store2)) ∧
        (RCHR_data_req( ra_r_key, index_req, cipher_data_req, gcm_tag_data_req
         ) @ #rchr_data_req_111)) ∧
       (E_r_data_req( platform, mrsigner, mrenclave, p_id1, ra_r_key, index_req,
                      cipher_data_req, gcm_tag_data_req
        ) @ #E_r_data_req)) ∧
      (DB_retrieve( p_id1, index_req, sealed_e_return2 ) @ #db_retrieve)) ∧
     (E_r_data_resp( platform, mrsigner, mrenclave, p_id1, ra_r_key,
                     index_req, data2, sealed_e_return2, cipher_data_resp, gcm_tag_data_resp
      ) @ #E_r_data_resp)) ∧
    (RCHR_data_resp( ra_r_key, index_req, data2, cipher_data_resp,
                     gcm_tag_data_resp
     ) @ #rchr_data_resp)"
/*
guarded formula characterizing all satisfying traces:
"∃ oname #do_setup ra_o_key1 data1 cipher_upload_req1 gcm_tag_upload_req1
   sealed_e_return1 #do_upload1 ra_o_key2 data2 cipher_upload_req2
   gcm_tag_upload_req2 sealed_e_return2 #do_upload2 platform #L1_platform
   mrenclave mrsigner #L2_mrsigner_mrenclave p_id1 p_id2 #L3_process1
   #L3_process2 #E_o_decrypt_upload1 #E_o_decrypt_upload2 index_init
   ptrIndex1 ptrIndex2 #db_setup ptrIndex3 #db_store1 #db_store2 ra_r_key
   index_req cipher_data_req gcm_tag_data_req #rchr_data_req_111
   #E_r_data_req #db_retrieve cipher_data_resp gcm_tag_data_resp
   #E_r_data_resp #rchr_data_resp.
  (DO_Setup( oname ) @ #do_setup) ∧
  (DO_upload( ra_o_key1, data1, oname, cipher_upload_req1,
              gcm_tag_upload_req1
   ) @ #do_upload1) ∧
  (DO_upload( ra_o_key2, data2, oname, cipher_upload_req2,
              gcm_tag_upload_req2
   ) @ #do_upload2) ∧
  (L1_platform( platform ) @ #L1_platform) ∧
  (L2_mrsigner_mrenclave( platform, mrsigner, mrenclave
   ) @ #L2_mrsigner_mrenclave) ∧
  (L3_process( platform, mrsigner, mrenclave, p_id1 ) @ #L3_process1) ∧
  (L3_process( platform, mrsigner, mrenclave, p_id2 ) @ #L3_process2) ∧
  (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id1, ra_o_key1,
                       data1, oname, cipher_upload_req1, gcm_tag_upload_req1, sealed_e_return1
   ) @ #E_o_decrypt_upload1) ∧
  (E_o_decrypt_upload( platform, mrsigner, mrenclave, p_id2, ra_o_key2,
                       data2, oname, cipher_upload_req2, gcm_tag_upload_req2, sealed_e_return2
   ) @ #E_o_decrypt_upload2) ∧
  (DB_setup( ptrIndex1, index_init ) @ #db_setup) ∧
  (index_init = '1') ∧
  (DB_store( p_id1, ptrIndex1, index_init, ptrIndex2, ('1'+index_init),
             sealed_e_return1
   ) @ #db_store1) ∧
  (DB_store( p_id2, ptrIndex2, ('1'+index_init), ptrIndex3,
             ('1'+'1'+index_init), sealed_e_return2
   ) @ #db_store2) ∧
  (RCHR_data_req( ra_r_key, index_req, cipher_data_req, gcm_tag_data_req
   ) @ #rchr_data_req_111) ∧
  (E_r_data_req( platform, mrsigner, mrenclave, p_id1, ra_r_key, index_req,
                 cipher_data_req, gcm_tag_data_req
   ) @ #E_r_data_req) ∧
  (DB_retrieve( p_id1, index_req, sealed_e_return2 ) @ #db_retrieve) ∧
  (E_r_data_resp( platform, mrsigner, mrenclave, p_id1, ra_r_key,
                  index_req, data2, sealed_e_return2, cipher_data_resp, gcm_tag_data_resp
   ) @ #E_r_data_resp) ∧
  (RCHR_data_resp( ra_r_key, index_req, data2, cipher_data_resp,
                   gcm_tag_data_resp
   ) @ #rchr_data_resp)"
*/
simplify
solve( !OMem( ~oname ) ▶₂ #do_upload1 )
  case DO_setup
  solve( !OMem( ~oname ) ▶₂ #do_upload2 )
    case DO_setup
    solve( !L12( ~platform_sec ) ▶₂ #L2_mrsigner_mrenclave )
      case L1_platform
      solve( !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process1 )
        case L2_mrsigner_mrenclave
        solve( !L23( ~platform_sec, ~mrsigner, ~mrenclave ) ▶₀ #L3_process2 )
          case L2_mrsigner_mrenclave
          solve( Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id
                 ) ▶₁ #E_o_decrypt_upload1 )
            case L3_process
            solve( RA_o_login( ~ra_o_key ) ▶₂ #E_o_decrypt_upload1 )
              case DO_upload
              solve( Start_thread_e_upload( ~platform_sec, ~mrsigner, ~mrenclave,
                                            ~p_id.1
                     ) ▶₁ #E_o_decrypt_upload2 )
                case L3_process
                solve( RA_o_login( ~ra_o_key.1 ) ▶₂ #E_o_decrypt_upload2 )
                  case DO_upload
                  solve( RA_r_login( ~ra_r_key ) ▶₁ #E_r_data_req )
                    case RCHR_data_req_case_1
                    solve( Start_thread_e_data_req( ~platform_sec, ~mrsigner, ~mrenclave,
                                                    ~p_id
                           ) ▶₂ #E_r_data_req )
                      case L3_process
                      solve( !DB_mem( index_req,
                                      senc(<~oname, ~data.1>, h(<~platform_sec, ~mrsigner, 'seal'>))
                             ) ▶₁ #db_retrieve )
                        case DB_store
                        solve( Start_thread_db_data_req( ~p_id ) ▶₂ #db_retrieve )
                          case L3_process
                          solve( EPC_E_r( ~platform_sec, ~mrsigner, ~mrenclave, ~p_id, ~ra_r_key,
                                          ('1'+i)
                                 ) ▶₁ #E_r_data_resp )
                            case E_r_data_req
                            solve( Mem_RCHR( ~ra_r_key, ('1'+i) ) ▶₀ #rchr_data_resp )
                              case RCHR_data_req
                              solve( DB_store( ~p_id, ~ptr, '1', ptrIndex2, ('1'+'1'),
                                               senc(<~oname, ~data>, h(<~platform_sec, ~mrsigner, 'seal'>))
                                     ) @ #db_store1 )
                                case DB_store
                                solve( Start_thread_db_upload( ~p_id ) ▶₁ #db_store1 )
                                  case L3_process
                                  solve( DB_store( ~p_id.1, ~ptr_new, ('1'+'1'), ptrIndex3, ('1'+'1'+'1'),
                                                   senc(<~oname, ~data.1>,
                                                        h(<~platform_sec, ~mrsigner, 'seal'>))
                                         ) @ #db_store2 )
                                    case DB_store
                                    solve( Start_thread_db_upload( ~p_id.1 ) ▶₁ #db_store2 )
                                      case L3_process
                                      solve( RCHR_data_req( ~ra_r_key, ('1'+'1'),
                                                            senc(<'RCHR_data_req', ('1'+'1')>, ~ra_r_key),
                                                            senc(h(senc(<'RCHR_data_req', ('1'+'1')>,
                                                                        ~ra_r_key)),
                                                                 ~ra_r_key)
                                             ) @ #rchr_data_req_111 )
                                        case RCHR_data_req
                                        solve( !DB_index( ptr.1, '1' ) ▶₂ #vr.1 )
                                          case DB_setup
                                          solve( !DB_index( ~ptr, '1' ) ▶₂ #db_store1 )
                                            case DB_setup
                                            solve( !DB_index( ~ptr_new, ('1'+'1') ) ▶₂ #db_store2 )
                                              case DB_store
                                              solve( !KU( senc(<'upload', ~oname, ~data>, ~ra_o_key)
                                                     ) @ #vk.1 )
                                                case DO_upload
                                                solve( !KU( senc(h(senc(<'upload', ~oname, ~data>,
                                                                        ~ra_o_key)),
                                                                 ~ra_o_key)
                                                       ) @ #vk.2 )
                                                  case DO_upload
                                                  solve( !KU( senc(<'upload', ~oname, ~data.1>, ~ra_o_key.1)
                                                         ) @ #vk.4 )
                                                    case DO_upload
                                                    solve( !KU( senc(h(senc(<'upload', ~oname, ~data.1>,
                                                                            ~ra_o_key.1)),
                                                                     ~ra_o_key.1)
                                                           ) @ #vk.5 )
                                                      case DO_upload
                                                      solve( !KU( senc(<'RCHR_data_req', ('1'+'1')>,
                                                                       ~ra_r_key)
                                                             ) @ #vk.7 )
                                                        case RCHR_data_req
                                                        solve( !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>,
                                                                                ~ra_r_key)),
                                                                         ~ra_r_key)
                                                               ) @ #vk.8 )
                                                          case RCHR_data_req
                                                          solve( !KU( senc(<~oname, ~data.1>,
                                                                           h(<~platform_sec, ~mrsigner, 'seal'
                                                                             >))
                                                                 ) @ #vk.14 )
                                                            case E_o_decrypt_upload
                                                            solve( !KU( senc(<'upload', ~oname, ~data.1>,
                                                                             ~ra_o_key.2)
                                                                   ) @ #vk.26 )
                                                              case DO_upload
                                                              solve( !KU( senc(<'RCHR_data_resp', ~data.1>,
                                                                               ~ra_r_key)
                                                                     ) @ #vk.19 )
                                                                case E_r_data_resp
                                                                solve( !KU( senc(h(senc(<'RCHR_data_resp', 
                                                                                         ~data.1>,
                                                                                        ~ra_r_key)),
                                                                                 ~ra_r_key)
                                                                       ) @ #vk.20 )
                                                                  case E_r_data_resp
                                                                  solve( !KU( senc(<~oname, ~data>,
                                                                                   h(<~platform_sec, 
                                                                                      ~mrsigner, 'seal'>))
                                                                         ) @ #vk.24 )
                                                                    case E_o_decrypt_upload
                                                                    solve( !KU( senc(<'upload', ~oname, ~data
                                                                                     >,
                                                                                     ~ra_o_key.2)
                                                                           ) @ #vk.26 )
                                                                      case DO_upload
                                                                      SOLVED // trace found
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unique_ra_session_at_ecall [reuse]:
  all-traces
  "∀ ra_r_key_x index_req_x1 sealed_e_return_x1 #E_r_data_reply_ex_x1
     index_req_x2 sealed_e_return_x2 #E_r_data_reply_ex_x2.
    ((E_r_data_reply_ex( ra_r_key_x, index_req_x1, sealed_e_return_x1
      ) @ #E_r_data_reply_ex_x1) ∧
     (E_r_data_reply_ex( ra_r_key_x, index_req_x2, sealed_e_return_x2
      ) @ #E_r_data_reply_ex_x2)) ⇒
    (#E_r_data_reply_ex_x1 = #E_r_data_reply_ex_x2)"
/*
guarded formula characterizing all counter-examples:
"∃ ra_r_key_x index_req_x1 sealed_e_return_x1 #E_r_data_reply_ex_x1
   index_req_x2 sealed_e_return_x2 #E_r_data_reply_ex_x2.
  (E_r_data_reply_ex( ra_r_key_x, index_req_x1, sealed_e_return_x1
   ) @ #E_r_data_reply_ex_x1) ∧
  (E_r_data_reply_ex( ra_r_key_x, index_req_x2, sealed_e_return_x2
   ) @ #E_r_data_reply_ex_x2)
 ∧
  ¬(#E_r_data_reply_ex_x1 = #E_r_data_reply_ex_x2)"
*/
simplify
solve( (#E_r_data_reply_ex_x1 < #E_r_data_reply_ex_x2)  ∥
       (#E_r_data_reply_ex_x2 < #E_r_data_reply_ex_x1) )
  case case_1
  solve( EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                  index_req_x1
         ) ▶₁ #E_r_data_reply_ex_x1 )
    case E_r_data_req_case_1
    solve( EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
                    ~ra_r_key, index_req_x2
           ) ▶₁ #E_r_data_reply_ex_x2 )
      case E_r_data_req
      by contradiction /* cyclic */
    qed
  next
    case E_r_data_req_case_2
    solve( EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
                    ~ra_r_key, index_req_x2
           ) ▶₁ #E_r_data_reply_ex_x2 )
      case E_r_data_req
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                  index_req_x1
         ) ▶₁ #E_r_data_reply_ex_x1 )
    case E_r_data_req_case_1
    solve( EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
                    ~ra_r_key, index_req_x2
           ) ▶₁ #E_r_data_reply_ex_x2 )
      case E_r_data_req
      by contradiction /* cyclic */
    qed
  next
    case E_r_data_req_case_2
    solve( EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
                    ~ra_r_key, index_req_x2
           ) ▶₁ #E_r_data_reply_ex_x2 )
      case E_r_data_req
      by contradiction /* cyclic */
    qed
  qed
qed

lemma unique_ra_session_at_request [reuse]:
  all-traces
  "∀ ra_r_key index_req1 #RCHR_data_rcv1 index_req2 #RCHR_data_rcv2.
    ((RCHR_data_rcv( ra_r_key, index_req1 ) @ #RCHR_data_rcv1) ∧
     (RCHR_data_rcv( ra_r_key, index_req2 ) @ #RCHR_data_rcv2)) ⇒
    (#RCHR_data_rcv1 = #RCHR_data_rcv2)"
/*
guarded formula characterizing all counter-examples:
"∃ ra_r_key index_req1 #RCHR_data_rcv1 index_req2 #RCHR_data_rcv2.
  (RCHR_data_rcv( ra_r_key, index_req1 ) @ #RCHR_data_rcv1) ∧
  (RCHR_data_rcv( ra_r_key, index_req2 ) @ #RCHR_data_rcv2)
 ∧
  ¬(#RCHR_data_rcv1 = #RCHR_data_rcv2)"
*/
simplify
solve( (#RCHR_data_rcv1 < #RCHR_data_rcv2)  ∥
       (#RCHR_data_rcv2 < #RCHR_data_rcv1) )
  case case_1
  solve( Mem_RCHR( ~ra_r_key, index_req1 ) ▶₀ #RCHR_data_rcv1 )
    case RCHR_data_req_case_1
    solve( Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2 )
      case RCHR_data_req
      by contradiction /* cyclic */
    qed
  next
    case RCHR_data_req_case_2
    solve( Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2 )
      case RCHR_data_req
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Mem_RCHR( ~ra_r_key, index_req1 ) ▶₀ #RCHR_data_rcv1 )
    case RCHR_data_req_case_1
    solve( Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2 )
      case RCHR_data_req
      by contradiction /* cyclic */
    qed
  next
    case RCHR_data_req_case_2
    solve( Mem_RCHR( ~ra_r_key, index_req2 ) ▶₀ #RCHR_data_rcv2 )
      case RCHR_data_req
      by contradiction /* cyclic */
    qed
  qed
qed

lemma unique_ra_session_n_index_req_resp_map [reuse]:
  all-traces
  "∀ ra_r_key index_req #RCHR_data_rcv.
    (RCHR_data_rcv( ra_r_key, index_req ) @ #RCHR_data_rcv) ⇒
    (∃ ra_r_key_x index_req_x sealed_e_return_x #E_r_data_reply_ex_x.
      (E_r_data_reply_ex( ra_r_key_x, index_req_x, sealed_e_return_x
       ) @ #E_r_data_reply_ex_x) ∧
      (ra_r_key_x = ra_r_key))"
/*
guarded formula characterizing all counter-examples:
"∃ ra_r_key index_req #RCHR_data_rcv.
  (RCHR_data_rcv( ra_r_key, index_req ) @ #RCHR_data_rcv)
 ∧
  ∀ ra_r_key_x index_req_x sealed_e_return_x #E_r_data_reply_ex_x.
   (E_r_data_reply_ex( ra_r_key_x, index_req_x, sealed_e_return_x
    ) @ #E_r_data_reply_ex_x) ∧
   (ra_r_key_x = ra_r_key)
  ⇒
   ⊥"
*/
simplify
solve( Mem_RCHR( ~ra_r_key, index_req ) ▶₀ #RCHR_data_rcv )
  case RCHR_data_req_case_1
  solve( !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3 )
    case E_r_data_resp
    by contradiction /* from formulas */
  next
    case c_senc
    by solve( !KU( ~ra_r_key ) @ #vk.6 )
  qed
next
  case RCHR_data_req_case_2
  solve( !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3 )
    case E_r_data_resp
    by contradiction /* from formulas */
  next
    case c_senc
    by solve( !KU( ~ra_r_key ) @ #vk.6 )
  qed
qed

lemma unique_ra_session_n_index_req_resp_inj_map_plain:
  all-traces
  "∀ ra_r_key index_req #RCHR_data_rcv.
    (RCHR_data_rcv( ra_r_key, index_req ) @ #RCHR_data_rcv) ⇒
    (∃ ra_r_key_x index_req_x sealed_e_return_x #E_r_data_reply_ex_x.
      (((E_r_data_reply_ex( ra_r_key_x, index_req_x, sealed_e_return_x
         ) @ #E_r_data_reply_ex_x) ∧
        (ra_r_key_x = ra_r_key)) ∧
       (index_req_x = index_req)) ∧
      (∀ ra_r_key_y index_req_y sealed_e_return_y #E_r_data_reply_ex_y.
        ((E_r_data_reply_ex( ra_r_key_y, index_req_y, sealed_e_return_y
          ) @ #E_r_data_reply_ex_y) ∧
         (ra_r_key_y = ra_r_key_x)) ⇒
        (#E_r_data_reply_ex_x = #E_r_data_reply_ex_y)))"
/*
guarded formula characterizing all counter-examples:
"∃ ra_r_key index_req #RCHR_data_rcv.
  (RCHR_data_rcv( ra_r_key, index_req ) @ #RCHR_data_rcv)
 ∧
  ∀ ra_r_key_x index_req_x sealed_e_return_x #E_r_data_reply_ex_x.
   (E_r_data_reply_ex( ra_r_key_x, index_req_x, sealed_e_return_x
    ) @ #E_r_data_reply_ex_x) ∧
   (ra_r_key_x = ra_r_key) ∧
   (index_req_x = index_req)
  ⇒
   ∃ ra_r_key_y index_req_y sealed_e_return_y #E_r_data_reply_ex_y.
    (E_r_data_reply_ex( ra_r_key_y, index_req_y, sealed_e_return_y
     ) @ #E_r_data_reply_ex_y) ∧
    (ra_r_key_y = ra_r_key_x)
   ∧
    ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_y)"
*/
simplify
solve( Mem_RCHR( ~ra_r_key, index_req ) ▶₀ #RCHR_data_rcv )
  case RCHR_data_req_case_1
  solve( EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                  index_req_x
         ) ▶₁ #E_r_data_reply_ex_x )
    case E_r_data_req
    solve( !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3 )
      case E_r_data_resp
      solve( !KU( senc(<oname_sealed, data_rcvd>,
                       h(<~platform_sec, ~mrsigner, 'seal'>))
             ) @ #vk.7 )
        case E_o_decrypt_upload
        solve( !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9 )
          case RCHR_data_req
          by contradiction /* from formulas */
        next
          case c_senc
          by solve( !KU( ~ra_r_key ) @ #vk.15 )
        qed
      next
        case c_senc
        solve( !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9 )
          case RCHR_data_req
          by contradiction /* from formulas */
        next
          case c_senc
          by solve( !KU( ~ra_r_key ) @ #vk.16 )
        qed
      qed
    next
      case c_senc
      by solve( !KU( ~ra_r_key ) @ #vk.12 )
    qed
  qed
next
  case RCHR_data_req_case_2
  solve( EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                  index_req_x
         ) ▶₁ #E_r_data_reply_ex_x )
    case E_r_data_req
    solve( !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.3 )
      case E_r_data_resp
      solve( !KU( senc(<oname_sealed, data_rcvd>,
                       h(<~platform_sec, ~mrsigner, 'seal'>))
             ) @ #vk.7 )
        case E_o_decrypt_upload
        solve( !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9 )
          case RCHR_data_req
          by contradiction /* from formulas */
        next
          case c_senc
          by solve( !KU( ~ra_r_key ) @ #vk.15 )
        qed
      next
        case c_senc
        solve( !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.9 )
          case RCHR_data_req
          by contradiction /* from formulas */
        next
          case c_senc
          by solve( !KU( ~ra_r_key ) @ #vk.16 )
        qed
      qed
    next
      case c_senc
      by solve( !KU( ~ra_r_key ) @ #vk.12 )
    qed
  qed
qed

lemma sealing_replay_plain:
  all-traces
  "∀ ra_r_key_x index_req_x #RCHR_data_rcv_x ra_r_key_y index_req_y
     #RCHR_data_rcv_y.
    (((RCHR_data_rcv( ra_r_key_x, index_req_x ) @ #RCHR_data_rcv_x) ∧
      (RCHR_data_rcv( ra_r_key_y, index_req_y ) @ #RCHR_data_rcv_y)) ∧
     (¬(index_req_x = index_req_y))) ⇒
    (∃ sealed_e_return_a #E_r_data_reply_ex_a sealed_e_return_b
       #E_r_data_reply_ex_b.
      ((((E_r_data_reply_ex( ra_r_key_x, index_req_x, sealed_e_return_a
          ) @ #E_r_data_reply_ex_a) ∧
         (∀ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
           (E_r_data_reply_ex( ra_r_key_x, index_req_t, sealed_e_return_t
            ) @ #E_r_data_reply_ex_t) ⇒
           (#E_r_data_reply_ex_a = #E_r_data_reply_ex_t))) ∧
        (E_r_data_reply_ex( ra_r_key_y, index_req_y, sealed_e_return_b
         ) @ #E_r_data_reply_ex_b)) ∧
       (∀ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
         (E_r_data_reply_ex( ra_r_key_y, index_req_t, sealed_e_return_t
          ) @ #E_r_data_reply_ex_t) ⇒
         (#E_r_data_reply_ex_b = #E_r_data_reply_ex_t))) ∧
      (¬(sealed_e_return_a = sealed_e_return_b)))"
/*
guarded formula characterizing all counter-examples:
"∃ ra_r_key_x index_req_x #RCHR_data_rcv_x ra_r_key_y index_req_y
   #RCHR_data_rcv_y.
  (RCHR_data_rcv( ra_r_key_x, index_req_x ) @ #RCHR_data_rcv_x) ∧
  (RCHR_data_rcv( ra_r_key_y, index_req_y ) @ #RCHR_data_rcv_y)
 ∧
  (¬(index_req_x = index_req_y)) ∧
  (∀ sealed_e_return_a #E_r_data_reply_ex_a sealed_e_return_b
     #E_r_data_reply_ex_b.
    (E_r_data_reply_ex( ra_r_key_x, index_req_x, sealed_e_return_a
     ) @ #E_r_data_reply_ex_a) ∧
    (E_r_data_reply_ex( ra_r_key_y, index_req_y, sealed_e_return_b
     ) @ #E_r_data_reply_ex_b)
   ⇒
    ((∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ra_r_key_x, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_a = #E_r_data_reply_ex_t)) ∨
     (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
       (E_r_data_reply_ex( ra_r_key_y, index_req_t, sealed_e_return_t
        ) @ #E_r_data_reply_ex_t)
      ∧
       ¬(#E_r_data_reply_ex_b = #E_r_data_reply_ex_t)) ∨
     (sealed_e_return_a = sealed_e_return_b)))"
*/
simplify
solve( Mem_RCHR( ~ra_r_key, index_req_x ) ▶₀ #RCHR_data_rcv_x )
  case RCHR_data_req_case_1
  solve( Mem_RCHR( ~ra_r_key.1, index_req_y ) ▶₀ #RCHR_data_rcv_y )
    case RCHR_data_req_case_2
    solve( EPC_E_r( platform_sec, mrsigner, mrenclave, ~p_id, ~ra_r_key,
                    index_req_x
           ) ▶₁ #E_r_data_reply_ex_x )
      case E_r_data_req
      solve( EPC_E_r( platform_sec.1, mrsigner.1, mrenclave.1, ~p_id.1,
                      ~ra_r_key.1, index_req_x.1
             ) ▶₁ #E_r_data_reply_ex_x.1 )
        case E_r_data_req
        solve( !KU( senc(<'RCHR_data_resp', data_rcvd>, ~ra_r_key) ) @ #vk.4 )
          case E_r_data_resp
          solve( !KU( senc(<'RCHR_data_resp', data_rcvd.1>, ~ra_r_key.1)
                 ) @ #vk.7 )
            case E_r_data_resp
            solve( !KU( senc(<oname_sealed, data_rcvd>,
                             h(<~platform_sec, ~mrsigner, 'seal'>))
                   ) @ #vk.12 )
              case E_o_decrypt_upload
              solve( !KU( senc(<oname_sealed.1, data_sealed>,
                               h(<~platform_sec.1, ~mrsigner.1, 'seal'>))
                     ) @ #vk.13 )
                case E_o_decrypt_upload
                solve( !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key) ) @ #vk.15 )
                  case RCHR_data_req
                  solve( !KU( senc(<'RCHR_data_req', index_req_x>, ~ra_r_key.1)
                         ) @ #vk.18 )
                    case RCHR_data_req
                    solve( (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
                             (E_r_data_reply_ex( ~ra_r_key, index_req_t, sealed_e_return_t
                              ) @ #E_r_data_reply_ex_t)
                            ∧
                             ¬(#E_r_data_reply_ex_x = #E_r_data_reply_ex_t))  ∥
                           (∃ index_req_t sealed_e_return_t #E_r_data_reply_ex_t.
                             (E_r_data_reply_ex( ~ra_r_key.1, index_req_t, sealed_e_return_t
                              ) @ #E_r_data_reply_ex_t)
                            ∧
                             ¬(#E_r_data_reply_ex_x.1 = #E_r_data_reply_ex_t))  ∥
                           (senc(<oname_sealed, data_rcvd>, h(<~platform_sec, ~mrsigner, 'seal'>)) =
                            senc(<oname_sealed.1, data_sealed>,
                                 h(<~platform_sec.1, ~mrsigner.1, 'seal'>))) )
                      case case_3
                      solve( !KU( senc(<'upload', oname_sealed, data_rcvd>, ~ra_o_key)
                             ) @ #vk.19 )
                        case DO_upload
                        solve( !Indexes( x ) ▶₀ #vr.3 )
                          case Loop
                          solve( !Indexes( x ) ▶₀ #vr.22 )
                            case Loop
                            solve( !Indexes( x ) ▶₀ #vr.23 )
                              case Loop
                              solve( !Indexes( x ) ▶₀ #vr.24 )
                                case Loop
                                solve( !Indexes( x ) ▶₀ #vr.25 )
                                  case Loop
                                  solve( !Indexes( x ) ▶₀ #vr.26 )
                                    case Loop
                                    solve( !Indexes( x ) ▶₀ #vr.27 )
                                      case Loop
                                      solve( !Indexes( x ) ▶₀ #vr.28 )
                                        case Loop
                                        solve( !Indexes( x ) ▶₀ #vr.29 )
                                          case Loop
                                          solve( !Indexes( x ) ▶₀ #vr.30 )
                                            case Loop
                                            solve( !Indexes( x ) ▶₀ #vr.31 )
                                              case Loop
                                              solve( !Indexes( x ) ▶₀ #vr.32 )
                                                case Loop
                                                solve( !Indexes( x ) ▶₀ #vr.33 )
                                                  case Start
                                                  solve( !KU( senc(h(senc(<'RCHR_data_resp', ~data>,
                                                                          ~ra_r_key)),
                                                                   ~ra_r_key)
                                                         ) @ #vk.15 )
                                                    case E_r_data_resp
                                                    solve( !KU( senc(h(senc(<'RCHR_data_resp', ~data>,
                                                                            ~ra_r_key.1)),
                                                                     ~ra_r_key.1)
                                                           ) @ #vk.16 )
                                                      case E_r_data_resp
                                                      solve( !KU( senc(h(senc(<'RCHR_data_req', ('1'+'1')>,
                                                                              ~ra_r_key)),
                                                                       ~ra_r_key)
                                                             ) @ #vk.18 )
                                                        case RCHR_data_req
                                                        solve( !KU( senc(h(senc(<'RCHR_data_req', 
                                                                                 ('1'+'1'+'1'+'1'+'1'+'1'+'1'+
                                                                                  '1'+'1'+'1'+'1'+'1'+'1'+'1'+
                                                                                  '1')
                                                                                >,
                                                                                ~ra_r_key.1)),
                                                                         ~ra_r_key.1)
                                                               ) @ #vk.19 )
                                                          case RCHR_data_req
                                                          solve( !KU( senc(h(senc(<'upload', ~oname, ~data>,
                                                                                  ~ra_o_key)),
                                                                           ~ra_o_key)
                                                                 ) @ #vk.20 )
                                                            case DO_upload
                                                            SOLVED // trace found
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: bi.spthy

  AUTO_typing_src (all-traces): verified (354 steps)
  honest_run_req11 (exists-trace): verified (26 steps)
  honest_run_req111 (exists-trace): verified (27 steps)
  honest_run_2_upload (exists-trace): verified (37 steps)
  unique_ra_session_at_ecall (all-traces): verified (12 steps)
  unique_ra_session_at_request (all-traces): verified (12 steps)
  unique_ra_session_n_index_req_resp_map (all-traces): verified (8 steps)
  unique_ra_session_n_index_req_resp_inj_map_plain (all-traces): verified (22 steps)
  sealing_replay_plain (all-traces): falsified - found trace (32 steps)

==============================================================================

